<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏眠鱼</title>
  
  <subtitle>大刀砍蜻蜓，枯枝击游鱼</subtitle>
  <link href="http://xiamianyu.github.io/atom.xml" rel="self"/>
  
  <link href="http://xiamianyu.github.io/"/>
  <updated>2025-10-31T13:48:12.743Z</updated>
  <id>http://xiamianyu.github.io/</id>
  
  <author>
    <name>夏眠鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>四则运算</title>
    <link href="http://xiamianyu.github.io/posts/pure-calc/"/>
    <id>http://xiamianyu.github.io/posts/pure-calc/</id>
    <published>2025-10-19T03:58:03.000Z</published>
    <updated>2025-10-31T13:48:12.743Z</updated>
    
    <content type="html"><![CDATA[<p>给家里小盆友们做了一款纯净版的四则运算微信小程序，适用于小学1-4年级日常训练。</p><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><ul><li>无登录注册，无需联网，完全本地运行 </li><li>支持单元练习、专项练习和错题练习</li><li>每道错题提供清晰解析与解题思路</li></ul><h2 id="隐私承诺"><a href="#隐私承诺" class="headerlink" title="隐私承诺"></a>隐私承诺</h2><ul><li>不采集、不上传、不跟踪任何个人数据</li><li>所有练习数据仅存储在用户设备本地</li></ul><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><ul><li>在“答题挑战”页快速检测掌握度</li><li>在“专项练习”页针对性提升薄弱点</li><li>在“错题练习”页结合解析巩固易错点</li><li>在“答题战绩”页查看进度与趋势</li></ul><h2 id="小程序二维码"><a href="#小程序二维码" class="headerlink" title="小程序二维码"></a>小程序二维码</h2><p><img src="/images/calc-mp.webp" alt="calc-mp"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;给家里小盆友们做了一款纯净版的四则运算微信小程序，适用于小学1-4年级日常训练。&lt;/p&gt;
&lt;h2 id=&quot;功能特性&quot;&gt;&lt;a href=&quot;#功能特性&quot; class=&quot;headerlink&quot; title=&quot;功能特性&quot;&gt;&lt;/a&gt;功能特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;无登录注册，无需</summary>
      
    
    
    
    
    <category term="production" scheme="http://xiamianyu.github.io/tags/production/"/>
    
  </entry>
  
  <entry>
    <title>大学之路</title>
    <link href="http://xiamianyu.github.io/posts/path-to-univ/"/>
    <id>http://xiamianyu.github.io/posts/path-to-univ/</id>
    <published>2025-10-12T15:10:05.000Z</published>
    <updated>2025-10-31T14:25:36.567Z</updated>
    
    <content type="html"><![CDATA[<p>小学，1-4年级在旧教学楼，5-6年级在新教学楼。新教学楼围墙上写着几个大字：</p><blockquote><p>面向现代化、面向世界、面向未来</p></blockquote><p>旁边挂着中国地图和世界地图，我经常走到这里去看地图，这是我认识世界的第一步。</p><p>在新教学楼，我遇到了三位特别重要的老师。</p><p>五年级，英语老师老麦跟我们聊起了大学生活：</p><blockquote><p>本周的作业下周才交，课程少，很自由，校园里会看到长发飘飘的女生坐在草坪里看书，人生一定要上大学，不然会有遗憾的</p></blockquote><p>这是我第一次听到大学这个名字，“课程少，很自由”很吸引我。</p><p>六年级，数学老师老许跟我们描述了小学、初中、高中的难易程度，再次提到了大学，我这才明白通往大学之路道阻且长。语文老师老谭痛骂我们：</p><blockquote><p>不读书，等着回家跟兄弟姐妹争那一亩三分地，没出息！</p></blockquote><p>这句话把我彻底骂醒了，第一次有了要走出去的想法。</p><p>初中，无意中发现小灵通可以听网络故事，其中有一个叫《让青春继续——初恋故事》的广播剧，讲述的是70后的大学生活：</p><blockquote><p>青春的土壤中，只有记忆是潮湿的。我们不是植物，不能在这块土地上生生不息。当我们回眸青春，仿佛有一种说不出的痛。很多人问我，青春的诀别是否意味着年迈的将近，其实，青春，它一直都在继续……</p></blockquote><p>通过它，我第一次对大学生活有了具体的了解，憧憬里面的校园生活，暗暗发誓一定要上大学看看。</p><p>高中的知识真的就和老师说的一样复杂，学起来比较费劲，我也没有像有些同学那么拼，天没亮就在教室阳台上打着台灯看书，所以高一高二的成绩非常一般。</p><p>高二结束时，我跟自己说，该破釜沉舟了！高三那一年，我全身心投入到学习当中，成绩慢慢跟上来了。</p><p>高考成绩出来了后，学校给每个人发了一本志愿填报指南，这本指南非常厚，看得眼花缭乱。很多同学对大学和专业没啥概念，纯属靠听说。有些考得不错的同学，因为选错了专业，又回去复读了，很可惜。</p><p>填志愿那天是在网吧度过的，指南都快翻烂了还是没头绪，离填报快结束时，心一横，就选计算机吧！毕竟这么多年，我还是喜欢上网，选个自己喜欢的，不会坏到哪里去吧。</p><p>谁知刚上大一就被师兄问了一个很严肃的问题：你之前学习过编程吗？我疑惑：编程是什么东西？我这才知道，原来我这专业是写代码的，不是我以为的PS之类的设觉设计，拍拍脑袋不做功课就是这种后果。</p><p>自己的大学生活并没有像《让青春继续》里那么精彩，一直是懵懵懂懂浑浑噩噩的状态。</p><p>大三上学期快结束时，觉得再混下去，毕业就等于失业了，得找个实验室进去做项目积累经验才行。</p><p>为了能进入老师的实验室，我在他的课堂上积极表现，课后要了老师电话。几天后，我鼓起勇气给老师打电话，表明想进入他的实验室。</p><p>结果老师问我，能给实验室带来什么好处？我预想过老师会问哪些问题，可从没想过会问这个问题，愣了几秒后，我回答：等我学有所成定会回报实验室。</p><p>就这样，我拿到了面试机会，最后顺利进入了实验室。在实验室巩固基础技能，学习项目开发、项目管理和团队协作。</p><p>在实验室的最后时光，我们其中几个人还私接了外包，排除万难，历时两个月交付。这是我们第一次将毕生所学应用到商业项目中，没有老师和师兄们带，完全靠自己，对于还没毕业的我们来说，非常有成就感。</p><p>大四上学期快结束时，我拿着接外包挣的钱，来到羊城租房找工作，一边工作一边准备毕业论文。虽然还没毕业，但是实验室的那段经历给了自己很大的底气，很多问题都敢迎难而上，所以工作做得还可以，一年半后就开始管理团队。</p><p>工作多年后，在某音乐平台上听到了《让青春继续》的续集《羊城岁月》，讲述的是他们大学毕业后的生活变迁。</p><p>《羊城岁月》中的男主李云峰，敢爱敢恨，想做的事就尽力去做，从不让自己后悔，他的奋斗史让人热血沸腾。</p><p>而我毕业后就一直在羊城工作，故事里的石牌、上下九、珠江新城、白云机场等名词我都特别熟悉，就像发生在自己身边一样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;小学，1-4年级在旧教学楼，5-6年级在新教学楼。新教学楼围墙上写着几个大字：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面向现代化、面向世界、面向未来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;旁边挂着中国地图和世界地图，我经常走到这里去看地图，这是我认识世界的第一步。&lt;/</summary>
      
    
    
    
    
    <category term="memoirs" scheme="http://xiamianyu.github.io/tags/memoirs/"/>
    
  </entry>
  
  <entry>
    <title>结缘Ubuntu</title>
    <link href="http://xiamianyu.github.io/posts/love-ubuntu/"/>
    <id>http://xiamianyu.github.io/posts/love-ubuntu/</id>
    <published>2025-10-05T10:28:54.000Z</published>
    <updated>2025-10-31T13:21:51.268Z</updated>
    
    <content type="html"><![CDATA[<p>上大学之前，接触电脑只能在网吧里，当时以为电脑都是Windows的，直到上了大学才知道还有其他操作系统。</p><p>大一暑假，参加了嵌入式实验室夏令营培训。期间，师兄第一件事是要求我们安装Ubuntu，我废了九牛二虎之力才在虚拟机上安装成功。</p><p>我的笔记本配置非常一般，开了虚拟机后就更卡了。如果时光可以倒流，我会选择虚拟机安装Ubuntu Server，宿主机通过SSH登录Server进行操作。可能当初师兄选择Ubuntu (Desktop)，是希望我们能完全在Ubuntu中沉浸式学习。</p><p>后来在其他实验室接触过Fedora，对比过后，还是更喜欢Ubuntu，特别是Ubuntu字体，有种莫名的美感。试过在MacBook中使用Ubuntu字体，可呈现出来的效果总是差点意思，唯独在Ubuntu上效果最佳。</p><p>培训期间，我沉迷于在Ubuntu上安装各种酷炫的效果，如3D桌面，火焰字等，所以学习汇报时特别尴尬，别人都是认真在学习编程，而我却在搞这些无聊的玩意。</p><p>培训的内容涵盖了大学四年的专业课，对于大一新生来说非常烧脑。多年后，唯独记住<a href="https://linux.vbird.org/">《鸟哥的私房菜》</a>这本书和师兄的一句话：“遇到不会的问题，找男人”，也就是man手册。</p><p>man手册是全英文的，一手资料，比网上的翻译好很多，同时会锻炼你的英文阅读能力。有些英文翻译成中文就变味了，比如service和server这两个词，翻译成中文时经常被搞混。</p><p>参加工作后，买了MacBook，以为就此和Ubuntu说拜拜了。有次帮同事编译一个开源的GNU程序，MacBook老是编译失败，又找不到根因，索性切换到Ubuntu下编译，结果编译成功了，这让我重新思考MacBook是不是不太适合做开发。好在自己基本做业务开发，对开源软件二次开发比较少。</p><p>国内小微企业大多用微信、QQ等软件沟通，这些软件要么不支持Linux，要么Linux版本功能非常简陋，想完全在Linux下工作比较困难。</p><p>近几年，微信开始支持Linux，QQ Linux版本也发布重大更新，我也将MacBook的macOS换成了Ubuntu，多年的愿望得以实现，老古董再次焕发活力。</p><p>希望国内越来越多的厂商支持Linux，让普罗大众能接触Linux。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上大学之前，接触电脑只能在网吧里，当时以为电脑都是Windows的，直到上了大学才知道还有其他操作系统。&lt;/p&gt;
&lt;p&gt;大一暑假，参加了嵌入式实验室夏令营培训。期间，师兄第一件事是要求我们安装Ubuntu，我废了九牛二虎之力才在虚拟机上安装成功。&lt;/p&gt;
&lt;p&gt;我的笔记本配</summary>
      
    
    
    
    
    <category term="memoirs" scheme="http://xiamianyu.github.io/tags/memoirs/"/>
    
  </entry>
  
  <entry>
    <title>第一台MBP</title>
    <link href="http://xiamianyu.github.io/posts/first-mbp/"/>
    <id>http://xiamianyu.github.io/posts/first-mbp/</id>
    <published>2025-10-02T04:52:25.000Z</published>
    <updated>2025-10-31T13:21:51.264Z</updated>
    
    <content type="html"><![CDATA[<p>刚参加工作时用的是大学时期的笔记本，配置很低，公司配的PC配置也不高，经常卡顿，导致工作效率非常低。</p><p>那时候听说MacBook Pro (MBP) 性能不错，只是价格比较贵。我咬咬牙还是上官网看了，买不起就当熟悉一下苹果的产品，把官网点了个遍。</p><p>看着看着，发现在官网的底部有“教育优惠”几个字，打开一看，原来是在校学生和老师购买苹果产品能享受信用卡免息一年的优惠。</p><p>此时我冒出了一个大胆的想法，如果办理一张额度能覆盖MBP价格的信用卡，再借用在校同学的学生证，不就可以使用教育优惠了吗？</p><p>刚毕业，信用卡额度有那么高吗？不知道，得试试。身边的同学还有谁没毕业的？没有。师弟师妹呢？没有这方面的资源。不过有一个人应该可以帮我，就看我脸皮够不够厚了。</p><p>哪家银行的信用卡额度最高呢？没做对比，就觉得公司的薪资卡是招行的，有工资流水，真实性肯定没问题，应该加分，额度高些。</p><p>信用卡办理下来时，发现额度能覆盖MBP，开心到爆。分期一年，月供一千，能负担得起了。</p><p>接下来要解决学生证的问题。</p><p>我曾担心苹果会对学生证做真人校验，也乐观地认为苹果不会做真人校验，只会限制一张学生证只能购买一次。</p><p>就算要做真人校验，也只是打电话确认（那时候还不流行人脸识别），我把电话写成学生证那个人的，提前跟对方打个招呼不就得了？</p><p>但是收货地址得写我的，苹果不会连收货地址都查吧。</p><p>按照我的方案，没多久就通过审核，进入订单发货状态，坐等收货，但还是出了点小插曲。</p><p>当时因为MBP产能不足，需要从台湾生产发货，等了快一个月才收到货。</p><p>这台MBP (Early 2015) 来之不易，所以我一直很珍惜它。我基本是系统一有更新就马上升级，用到第五年的时候已经有些卡顿，换成Ubuntu后流畅很多。</p><p>不过工作上主要用微信沟通，微信不支持Linux，不太方便，无奈又换回了macOS。</p><p>这两年微信开始支持Linux，我立马换回Ubuntu，MBP又活过来了。现在放在家里用，再战五年都没问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;刚参加工作时用的是大学时期的笔记本，配置很低，公司配的PC配置也不高，经常卡顿，导致工作效率非常低。&lt;/p&gt;
&lt;p&gt;那时候听说MacBook Pro (MBP) 性能不错，只是价格比较贵。我咬咬牙还是上官网看了，买不起就当熟悉一下苹果的产品，把官网点了个遍。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="memoirs" scheme="http://xiamianyu.github.io/tags/memoirs/"/>
    
  </entry>
  
  <entry>
    <title>博客十年</title>
    <link href="http://xiamianyu.github.io/posts/blog-10years/"/>
    <id>http://xiamianyu.github.io/posts/blog-10years/</id>
    <published>2025-09-24T04:52:25.000Z</published>
    <updated>2025-10-31T13:21:51.264Z</updated>
    
    <content type="html"><![CDATA[<p>大学时用过三方博客，也搭建过个人博客，都荒废了。</p><p>出来工作后买了MBP，因为看了《MacTalk·人生元编程》，又重拾搭建个人博客的热情。</p><p>这次搭建，我希望越简单越好，仅可读和检索，看博客就跟看报纸一样。</p><p>换句话说，我对个人博客的预期就是存档，排版做得好看一点即可。</p><p>因为不知道能坚持写多久，所以就按穷鬼配置找技术支持：markdown+免费域名+免费托管。</p><p>最终选择<a href="https://hexo.io/zh-cn/">Hexo</a>搭配<a href="https://docs.github.com/en/pages">GitHub Pages</a>，就这样用了很多年。</p><p>博客一开始使用<a href="https://github.com/next-theme/hexo-theme-next">next</a>主题，近几年换成了<a href="https://github.com/leedom92/hexo-theme-leedom">leedom</a>主题，也买了个人域名，别名指向Pages域名，不过GitHub服务器在海外，国内访问慢的问题依然存在，需要做CDN加速。</p><p>Cloudflare CDN在全球有很多节点，国内也不少，而且对个人免费，再适合不过了。做了CDN加速后，访问速度好了一些。</p><p>目前这套方案应该很多年都不会变了，简简单单就好。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大学时用过三方博客，也搭建过个人博客，都荒废了。&lt;/p&gt;
&lt;p&gt;出来工作后买了MBP，因为看了《MacTalk·人生元编程》，又重拾搭建个人博客的热情。&lt;/p&gt;
&lt;p&gt;这次搭建，我希望越简单越好，仅可读和检索，看博客就跟看报纸一样。&lt;/p&gt;
&lt;p&gt;换句话说，我对个人博客的预</summary>
      
    
    
    
    
    <category term="memoirs" scheme="http://xiamianyu.github.io/tags/memoirs/"/>
    
  </entry>
  
  <entry>
    <title>APK自有代码统计</title>
    <link href="http://xiamianyu.github.io/posts/apk-stats/"/>
    <id>http://xiamianyu.github.io/posts/apk-stats/</id>
    <published>2025-06-25T01:35:27.000Z</published>
    <updated>2025-11-01T06:45:46.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li>反编译APK文件</li><li>统计Smali代码中的方法数量</li><li>计算用户指定包前缀的代码占比</li></ol><h2 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h2><ul><li>总方法数</li><li>自有方法数</li><li>第三方方法数</li><li>自有代码百分比</li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>python3 apk_stats.py -p package_name [package_name ...] &lt;apk&gt;</code></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>apk_stats.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APKOwnCodeAnalyzer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, apk_path: <span class="built_in">str</span>, own_prefixes: <span class="built_in">list</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.apk_path = apk_path</span><br><span class="line">        <span class="variable language_">self</span>.own_prefixes = own_prefixes</span><br><span class="line">        <span class="variable language_">self</span>.temp_dir = tempfile.mkdtemp()</span><br><span class="line">        <span class="variable language_">self</span>.total_methods = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.own_methods = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.all_packages = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_command</span>(<span class="params">self, cmd: <span class="built_in">list</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            subprocess.check_output(cmd, stderr=subprocess.STDOUT)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Command failed: <span class="subst">&#123;<span class="string">&#x27; &#x27;</span>.join(cmd)&#125;</span>\nError: <span class="subst">&#123;e.output.decode()&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decompile_apk</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Decompiling APK using apktool...&quot;</span>)</span><br><span class="line">        apktool_cmd = [<span class="string">&quot;apktool&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="variable language_">self</span>.apk_path, <span class="string">&quot;-o&quot;</span>, <span class="variable language_">self</span>.temp_dir, <span class="string">&quot;-f&quot;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.run_command(apktool_cmd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_own_package</span>(<span class="params">self, package_path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;检查是否是自己的包名&quot;&quot;&quot;</span></span><br><span class="line">        normalized_path = package_path.replace(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">any</span>(normalized_path.startswith(prefix) <span class="keyword">for</span> prefix <span class="keyword">in</span> <span class="variable language_">self</span>.own_prefixes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count_methods_in_file</span>(<span class="params">self, smali_file: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;统计单个smali文件中.method指令个数&quot;&quot;&quot;</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(smali_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="keyword">if</span> line.strip().startswith(<span class="string">&#x27;.method&#x27;</span>):</span><br><span class="line">                        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error reading <span class="subst">&#123;smali_file&#125;</span>: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_smali_dir</span>(<span class="params">self, smali_dir: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;递归分析目录中的所有small文件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[*] Processing directory: <span class="subst">&#123;smali_dir&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(smali_dir):</span><br><span class="line">            rel_path = os.path.relpath(root, smali_dir)</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.smali&#x27;</span>):</span><br><span class="line">                    file_path = os.path.join(root, file)</span><br><span class="line">                    methods = <span class="variable language_">self</span>.count_methods_in_file(file_path)</span><br><span class="line">                    <span class="variable language_">self</span>.total_methods += methods</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 获取包路径（相对于smali_dir）</span></span><br><span class="line">                    rel_dir = os.path.dirname(os.path.relpath(file_path, smali_dir))</span><br><span class="line">                    <span class="variable language_">self</span>.all_packages[rel_dir] = <span class="variable language_">self</span>.all_packages.get(rel_dir, <span class="number">0</span>) + methods</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> <span class="variable language_">self</span>.is_own_package(rel_path):</span><br><span class="line">                        <span class="variable language_">self</span>.own_methods += methods</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_analysis</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;主要分析流程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.decompile_apk():</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理所有smali目录（包括multi-dex）</span></span><br><span class="line">        <span class="keyword">for</span> entry <span class="keyword">in</span> os.listdir(<span class="variable language_">self</span>.temp_dir):</span><br><span class="line">            full_path = os.path.join(<span class="variable language_">self</span>.temp_dir, entry)</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(full_path) <span class="keyword">and</span> (entry.startswith(<span class="string">&#x27;smali&#x27;</span>) <span class="keyword">or</span> entry.startswith(<span class="string">&#x27;smali_classes&#x27;</span>)):</span><br><span class="line">                <span class="variable language_">self</span>.process_smali_dir(full_path)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_report</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成统计报告&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.total_methods == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;No methods found!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nPackage Details:&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分离自身包和第三方包</span></span><br><span class="line">        self_packages = []</span><br><span class="line">        third_party_packages = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> pkg, count <span class="keyword">in</span> <span class="variable language_">self</span>.all_packages.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.is_own_package(pkg):</span><br><span class="line">                self_packages.append((pkg, count))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                third_party_packages.append((pkg, count))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分别按方法数量降序排序</span></span><br><span class="line">        self_packages.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">        third_party_packages.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 先输出自身包</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n[SELF] Packages:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> pkg, count <span class="keyword">in</span> self_packages:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pkg:&lt;<span class="number">80</span>&#125;</span> | Methods: <span class="subst">&#123;count:&lt;<span class="number">5</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 再输出第三方包</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n[THIRD PARTY] Packages:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> pkg, count <span class="keyword">in</span> third_party_packages:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pkg:&lt;<span class="number">80</span>&#125;</span> | Methods: <span class="subst">&#123;count:&lt;<span class="number">5</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">35</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Analysis Report:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Total methods: <span class="subst">&#123;self.total_methods&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Self-defined methods: <span class="subst">&#123;self.own_methods&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Third-party methods: <span class="subst">&#123;self.total_methods - self.own_methods&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">35</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Self-code Percentage: <span class="subst">&#123;self.own_methods/self.total_methods*<span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">35</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除临时文件&quot;&quot;&quot;</span></span><br><span class="line">        shutil.rmtree(<span class="variable language_">self</span>.temp_dir, ignore_errors=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">f&quot;[*] Cleaned up temporary directory&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;APK Self-Code Ratio Analyzer&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;apk&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Path to APK file&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--prefixes&#x27;</span>, nargs=<span class="string">&#x27;+&#x27;</span>, required=<span class="literal">True</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;Package prefixes for self-defined code (e.g. com.example.app)&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查apktool是否安装</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shutil.which(<span class="string">&#x27;apktool&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: apktool not found in PATH. Please install apktool.&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    analyzer = APKOwnCodeAnalyzer(args.apk, args.prefixes)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> analyzer.run_analysis():</span><br><span class="line">            analyzer.generate_report()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        analyzer.cleanup()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;反编译APK文件&lt;/li&gt;
&lt;li&gt;统计Smali代码中的方法数量&lt;/li&gt;
&lt;li&gt;计算用户指定包前缀的代码占比&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="android" scheme="http://xiamianyu.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>APK代码相似度计算</title>
    <link href="http://xiamianyu.github.io/posts/apk-sim/"/>
    <id>http://xiamianyu.github.io/posts/apk-sim/</id>
    <published>2025-06-24T08:12:01.000Z</published>
    <updated>2025-11-01T06:44:55.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>通过多维度特征融合计算相似度：</p><pre class="mermaid">graph LR    A[APK] --> B(操作码序列)    A --> C(资源特征)    A --> D(原生库)    A --> E(布局结构)    B --> F[相似度计算]    C --> F    D --> F    E --> F    F --> G{综合评分}</pre><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>python3 apk_sim.py &lt;apk1&gt; &lt;apk2&gt;</code></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>apk_sim.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 执行流程：</span></span><br><span class="line"><span class="comment"># 1. 通过命令行输入两个APK文件路径</span></span><br><span class="line"><span class="comment"># 2. 为每个APK创建临时目录用于反编译</span></span><br><span class="line"><span class="comment"># 3. 反编译APK（使用apktool）</span></span><br><span class="line"><span class="comment"># 4. 分别提取以下特征：</span></span><br><span class="line"><span class="comment">#    a. 操作码序列和向量（从smali代码）</span></span><br><span class="line"><span class="comment">#    b. 控制流特征（分支、循环、异常等）</span></span><br><span class="line"><span class="comment">#    c. 资源特征（包括AndroidManifest.xml、资源文件哈希、布局文件结构）</span></span><br><span class="line"><span class="comment">#    d. 原生库特征（ELF头、节名称）</span></span><br><span class="line"><span class="comment"># 5. 组合这些特征，使用MinHash计算结构相似度（包括资源、控制流、原生库和操作码序列指纹）</span></span><br><span class="line"><span class="comment"># 6. 计算操作码向量的余弦相似度</span></span><br><span class="line"><span class="comment"># 7. 计算资源特征的MinHash相似度（Jaccard相似度）</span></span><br><span class="line"><span class="comment"># 8. 加权综合相似度 = 操作码权重 * 操作码相似度 + 结构权重 * 结构相似度 + 资源权重 * 资源相似度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> datasketch <span class="keyword">import</span> MinHash</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics.pairwise <span class="keyword">import</span> cosine_similarity</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">NUM_PERM = <span class="number">256</span>      <span class="comment"># MinHash排列数</span></span><br><span class="line">OPCODE_SIM_WEIGHT = <span class="number">0.2</span> <span class="comment"># 操作码相似度权重</span></span><br><span class="line">STRUCTURE_SIM_WEIGHT = <span class="number">0.4</span> <span class="comment"># 结构相似度权重</span></span><br><span class="line">RESOURCE_SIM_WEIGHT = <span class="number">0.4</span> <span class="comment"># 资源相似度权重</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预编译正则表达式，提高性能</span></span><br><span class="line">OPCODE_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^\s*([a-zA-Z0-9/-]+)&#x27;</span>)</span><br><span class="line">ELF_SECTION_PATTERN = re.<span class="built_in">compile</span>(<span class="string">br&#x27;\.(text|rodata|data|bss|plt)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有可能的Dalvik操作码（设为全局常量）</span></span><br><span class="line">ALL_OPCODES = <span class="built_in">set</span>([</span><br><span class="line">    <span class="string">&#x27;nop&#x27;</span>, <span class="string">&#x27;move&#x27;</span>, <span class="string">&#x27;move/from16&#x27;</span>, <span class="string">&#x27;move/16&#x27;</span>, <span class="string">&#x27;move-wide&#x27;</span>, <span class="string">&#x27;move-wide/from16&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;move-wide/16&#x27;</span>, <span class="string">&#x27;move-object&#x27;</span>, <span class="string">&#x27;move-object/from16&#x27;</span>, <span class="string">&#x27;move-object/16&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;move-result&#x27;</span>, <span class="string">&#x27;move-result-wide&#x27;</span>, <span class="string">&#x27;move-result-object&#x27;</span>, <span class="string">&#x27;move-exception&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;return-void&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;return-wide&#x27;</span>, <span class="string">&#x27;return-object&#x27;</span>, <span class="string">&#x27;const/4&#x27;</span>, <span class="string">&#x27;const/16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;const&#x27;</span>, <span class="string">&#x27;const/high16&#x27;</span>, <span class="string">&#x27;const-wide/16&#x27;</span>, <span class="string">&#x27;const-wide/32&#x27;</span>, <span class="string">&#x27;const-wide&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;const-wide/high16&#x27;</span>, <span class="string">&#x27;const-string&#x27;</span>, <span class="string">&#x27;const-string/jumbo&#x27;</span>, <span class="string">&#x27;const-class&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;monitor-enter&#x27;</span>, <span class="string">&#x27;monitor-exit&#x27;</span>, <span class="string">&#x27;check-cast&#x27;</span>, <span class="string">&#x27;instance-of&#x27;</span>, <span class="string">&#x27;array-length&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;new-instance&#x27;</span>, <span class="string">&#x27;new-array&#x27;</span>, <span class="string">&#x27;filled-new-array&#x27;</span>, <span class="string">&#x27;fill-array-data&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;throw&#x27;</span>, <span class="string">&#x27;goto&#x27;</span>, <span class="string">&#x27;goto/16&#x27;</span>, <span class="string">&#x27;goto/32&#x27;</span>, <span class="string">&#x27;packed-switch&#x27;</span>, <span class="string">&#x27;sparse-switch&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cmpl-float&#x27;</span>, <span class="string">&#x27;cmpg-float&#x27;</span>, <span class="string">&#x27;cmpl-double&#x27;</span>, <span class="string">&#x27;cmpg-double&#x27;</span>, <span class="string">&#x27;cmp-long&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;if-eq&#x27;</span>, <span class="string">&#x27;if-ne&#x27;</span>, <span class="string">&#x27;if-lt&#x27;</span>, <span class="string">&#x27;if-ge&#x27;</span>, <span class="string">&#x27;if-gt&#x27;</span>, <span class="string">&#x27;if-le&#x27;</span>, <span class="string">&#x27;if-eqz&#x27;</span>, <span class="string">&#x27;if-nez&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;if-ltz&#x27;</span>, <span class="string">&#x27;if-gez&#x27;</span>, <span class="string">&#x27;if-gtz&#x27;</span>, <span class="string">&#x27;if-lez&#x27;</span>, <span class="string">&#x27;aget&#x27;</span>, <span class="string">&#x27;aget-wide&#x27;</span>, <span class="string">&#x27;aget-object&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;aget-boolean&#x27;</span>, <span class="string">&#x27;aget-byte&#x27;</span>, <span class="string">&#x27;aget-char&#x27;</span>, <span class="string">&#x27;aget-short&#x27;</span>, <span class="string">&#x27;aput&#x27;</span>, <span class="string">&#x27;aput-wide&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;aput-object&#x27;</span>, <span class="string">&#x27;aput-boolean&#x27;</span>, <span class="string">&#x27;aput-byte&#x27;</span>, <span class="string">&#x27;aput-char&#x27;</span>, <span class="string">&#x27;aput-short&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;iget&#x27;</span>, <span class="string">&#x27;iget-wide&#x27;</span>, <span class="string">&#x27;iget-object&#x27;</span>, <span class="string">&#x27;iget-boolean&#x27;</span>, <span class="string">&#x27;iget-byte&#x27;</span>, <span class="string">&#x27;iget-char&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;iget-short&#x27;</span>, <span class="string">&#x27;iput&#x27;</span>, <span class="string">&#x27;iput-wide&#x27;</span>, <span class="string">&#x27;iput-object&#x27;</span>, <span class="string">&#x27;iput-boolean&#x27;</span>, <span class="string">&#x27;iput-byte&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;iput-char&#x27;</span>, <span class="string">&#x27;iput-short&#x27;</span>, <span class="string">&#x27;sget&#x27;</span>, <span class="string">&#x27;sget-wide&#x27;</span>, <span class="string">&#x27;sget-object&#x27;</span>, <span class="string">&#x27;sget-boolean&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sget-byte&#x27;</span>, <span class="string">&#x27;sget-char&#x27;</span>, <span class="string">&#x27;sget-short&#x27;</span>, <span class="string">&#x27;sput&#x27;</span>, <span class="string">&#x27;sput-wide&#x27;</span>, <span class="string">&#x27;sput-object&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sput-boolean&#x27;</span>, <span class="string">&#x27;sput-byte&#x27;</span>, <span class="string">&#x27;sput-char&#x27;</span>, <span class="string">&#x27;sput-short&#x27;</span>, <span class="string">&#x27;invoke-virtual&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;invoke-super&#x27;</span>, <span class="string">&#x27;invoke-direct&#x27;</span>, <span class="string">&#x27;invoke-static&#x27;</span>, <span class="string">&#x27;invoke-interface&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;invoke-virtual/range&#x27;</span>, <span class="string">&#x27;invoke-super/range&#x27;</span>, <span class="string">&#x27;invoke-direct/range&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;invoke-static/range&#x27;</span>, <span class="string">&#x27;invoke-interface/range&#x27;</span>, <span class="string">&#x27;neg-int&#x27;</span>, <span class="string">&#x27;neg-long&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;neg-float&#x27;</span>, <span class="string">&#x27;neg-double&#x27;</span>, <span class="string">&#x27;int-to-long&#x27;</span>, <span class="string">&#x27;int-to-float&#x27;</span>, <span class="string">&#x27;int-to-double&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;long-to-int&#x27;</span>, <span class="string">&#x27;long-to-float&#x27;</span>, <span class="string">&#x27;long-to-double&#x27;</span>, <span class="string">&#x27;float-to-int&#x27;</span>, <span class="string">&#x27;float-to-long&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;float-to-double&#x27;</span>, <span class="string">&#x27;double-to-int&#x27;</span>, <span class="string">&#x27;double-to-long&#x27;</span>, <span class="string">&#x27;double-to-float&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;int-to-byte&#x27;</span>, <span class="string">&#x27;int-to-char&#x27;</span>, <span class="string">&#x27;int-to-short&#x27;</span>, <span class="string">&#x27;add-int&#x27;</span>, <span class="string">&#x27;sub-int&#x27;</span>, <span class="string">&#x27;mul-int&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;div-int&#x27;</span>, <span class="string">&#x27;rem-int&#x27;</span>, <span class="string">&#x27;and-int&#x27;</span>, <span class="string">&#x27;or-int&#x27;</span>, <span class="string">&#x27;xor-int&#x27;</span>, <span class="string">&#x27;shl-int&#x27;</span>, <span class="string">&#x27;shr-int&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ushr-int&#x27;</span>, <span class="string">&#x27;add-long&#x27;</span>, <span class="string">&#x27;sub-long&#x27;</span>, <span class="string">&#x27;mul-long&#x27;</span>, <span class="string">&#x27;div-long&#x27;</span>, <span class="string">&#x27;rem-long&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;and-long&#x27;</span>, <span class="string">&#x27;or-long&#x27;</span>, <span class="string">&#x27;xor-long&#x27;</span>, <span class="string">&#x27;shl-long&#x27;</span>, <span class="string">&#x27;shr-long&#x27;</span>, <span class="string">&#x27;ushr-long&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;add-float&#x27;</span>, <span class="string">&#x27;sub-float&#x27;</span>, <span class="string">&#x27;mul-float&#x27;</span>, <span class="string">&#x27;div-float&#x27;</span>, <span class="string">&#x27;rem-float&#x27;</span>, <span class="string">&#x27;add-double&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sub-double&#x27;</span>, <span class="string">&#x27;mul-double&#x27;</span>, <span class="string">&#x27;div-double&#x27;</span>, <span class="string">&#x27;rem-double&#x27;</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decompile_apk</span>(<span class="params">apk_path, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用apktool反编译APK文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        subprocess.run(</span><br><span class="line">            [<span class="string">&#x27;apktool&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, apk_path, <span class="string">&#x27;-o&#x27;</span>, output_dir, <span class="string">&#x27;-f&#x27;</span>],</span><br><span class="line">            check=<span class="literal">True</span>,</span><br><span class="line">            stdout=subprocess.DEVNULL,</span><br><span class="line">            stderr=subprocess.DEVNULL,</span><br><span class="line">            creationflags=get_creation_flags()</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> (subprocess.CalledProcessError, FileNotFoundError):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_creation_flags</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取平台特定的进程创建标志&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> sys.platform == <span class="string">&#x27;win32&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> subprocess.CREATE_NO_WINDOW</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_opcode_vectors</span>(<span class="params">decompiled_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从smali文件中提取操作码序列及分布向量</span></span><br><span class="line"><span class="string">    返回: (opcode_seq_fp, opcode_vector)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    opcode_counter = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    opcode_sequences = []</span><br><span class="line">    opcode_vector = &#123;opcode: <span class="number">0</span> <span class="keyword">for</span> opcode <span class="keyword">in</span> ALL_OPCODES&#125;</span><br><span class="line">    total_opcodes = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    smali_files = glob.glob(os.path.join(decompiled_dir, <span class="string">&#x27;smali**&#x27;</span>, <span class="string">&#x27;*.smali&#x27;</span>), recursive=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> smali_files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, opcode_vector</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> smali_file <span class="keyword">in</span> smali_files:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(smali_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                in_method = <span class="literal">False</span></span><br><span class="line">                current_seq = []</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="comment"># 检测方法开始</span></span><br><span class="line">                    <span class="keyword">if</span> line.startswith(<span class="string">&#x27;.method&#x27;</span>):</span><br><span class="line">                        in_method = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 检测方法结束</span></span><br><span class="line">                    <span class="keyword">if</span> line.startswith(<span class="string">&#x27;.end method&#x27;</span>):</span><br><span class="line">                        <span class="keyword">if</span> current_seq:</span><br><span class="line">                            opcode_sequences.append(<span class="built_in">tuple</span>(current_seq))</span><br><span class="line">                            current_seq = []</span><br><span class="line">                        in_method = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 处理方法体</span></span><br><span class="line">                    <span class="keyword">if</span> in_method <span class="keyword">and</span> <span class="keyword">not</span> line.startswith((<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;#&#x27;</span>)):</span><br><span class="line">                        <span class="comment"># 使用预编译正则提取操作码</span></span><br><span class="line">                        <span class="keyword">match</span> = OPCODE_PATTERN.<span class="keyword">match</span>(line.strip())</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                            opcode = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment"># 过滤伪操作码</span></span><br><span class="line">                            <span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> opcode <span class="keyword">or</span> opcode.startswith(<span class="string">&#x27;&quot;&#x27;</span>):</span><br><span class="line">                                <span class="keyword">continue</span></span><br><span class="line">                                </span><br><span class="line">                            <span class="comment"># 标准化操作码</span></span><br><span class="line">                            <span class="keyword">if</span> opcode.endswith(<span class="string">&#x27;&#125;&#x27;</span>) <span class="keyword">or</span> opcode.endswith(<span class="string">&#x27;)&#x27;</span>):</span><br><span class="line">                                opcode = re.split(<span class="string">r&#x27;[\&#123;\&#125;]&#x27;</span>, opcode)[<span class="number">0</span>]</span><br><span class="line">                            </span><br><span class="line">                            <span class="comment"># 添加到序列</span></span><br><span class="line">                            <span class="keyword">if</span> opcode <span class="keyword">in</span> ALL_OPCODES:</span><br><span class="line">                                current_seq.append(opcode)</span><br><span class="line">                                opcode_counter[opcode] += <span class="number">1</span></span><br><span class="line">                                total_opcodes += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 捕获方法结束但文件结束的情况</span></span><br><span class="line">                <span class="keyword">if</span> current_seq:</span><br><span class="line">                    opcode_sequences.append(<span class="built_in">tuple</span>(current_seq))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># 记录错误但继续处理其他文件</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成序列指纹</span></span><br><span class="line">    seq_hash = hashlib.sha256(json.dumps(opcode_sequences, sort_keys=<span class="literal">True</span>).encode()).hexdigest() <span class="keyword">if</span> opcode_sequences <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成向量</span></span><br><span class="line">    <span class="keyword">if</span> total_opcodes &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> opcode, count <span class="keyword">in</span> opcode_counter.items():</span><br><span class="line">            opcode_vector[opcode] = count / total_opcodes</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">return</span> seq_hash, opcode_vector</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_control_flow_features</span>(<span class="params">decompiled_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从smali代码中提取控制流特征&quot;&quot;&quot;</span></span><br><span class="line">    cf_features = <span class="built_in">set</span>()</span><br><span class="line">    total_methods = <span class="number">0</span></span><br><span class="line">    branch_count = <span class="number">0</span></span><br><span class="line">    loop_count = <span class="number">0</span></span><br><span class="line">    exception_count = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    smali_files = glob.glob(os.path.join(decompiled_dir, <span class="string">&#x27;smali**&#x27;</span>, <span class="string">&#x27;*.smali&#x27;</span>), recursive=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> smali_files:</span><br><span class="line">        <span class="keyword">return</span> cf_features</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> smali_file <span class="keyword">in</span> smali_files:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(smali_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">                    <span class="comment"># 统计方法数</span></span><br><span class="line">                    <span class="keyword">if</span> line.startswith(<span class="string">&#x27;.method&#x27;</span>):</span><br><span class="line">                        total_methods += <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 分支指令</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;if-&#x27;</span> <span class="keyword">in</span> line <span class="keyword">or</span> <span class="string">&#x27;goto&#x27;</span> <span class="keyword">in</span> line <span class="keyword">or</span> <span class="string">&#x27;switch&#x27;</span> <span class="keyword">in</span> line <span class="keyword">or</span> <span class="string">&#x27;packed-switch&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        branch_count += <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 循环模式</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;loop&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        loop_count += <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 异常处理</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;.catch&#x27;</span> <span class="keyword">in</span> line <span class="keyword">or</span> <span class="string">&#x27;throw&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">                        exception_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算并添加特征</span></span><br><span class="line">    <span class="keyword">if</span> total_methods &gt; <span class="number">0</span>:</span><br><span class="line">        cf_features.add(<span class="string">f&quot;CF_BRANCH_METHOD:<span class="subst">&#123;branch_count/total_methods:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        cf_features.add(<span class="string">f&quot;CF_LOOP_METHOD:<span class="subst">&#123;loop_count/total_methods:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        cf_features.add(<span class="string">f&quot;CF_EXCEPT_METHOD:<span class="subst">&#123;exception_count/total_methods:<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cf_features</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_manifest_features</span>(<span class="params">manifest_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从AndroidManifest.xml中提取特征&quot;&quot;&quot;</span></span><br><span class="line">    features = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(manifest_path):</span><br><span class="line">        <span class="keyword">return</span> features</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(manifest_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            soup = BeautifulSoup(f.read(), <span class="string">&#x27;xml&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 权限</span></span><br><span class="line">            <span class="keyword">for</span> uses_perm <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;uses-permission&#x27;</span>):</span><br><span class="line">                name = uses_perm.get(<span class="string">&#x27;android:name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> name:</span><br><span class="line">                    features.add(<span class="string">f&#x27;PERMISSION:<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 组件</span></span><br><span class="line">            comp_types = [<span class="string">&#x27;activity&#x27;</span>, <span class="string">&#x27;service&#x27;</span>, <span class="string">&#x27;receiver&#x27;</span>, <span class="string">&#x27;provider&#x27;</span>]</span><br><span class="line">            <span class="keyword">for</span> comp_type <span class="keyword">in</span> comp_types:</span><br><span class="line">                <span class="keyword">for</span> comp <span class="keyword">in</span> soup.find_all(comp_type):</span><br><span class="line">                    name = comp.get(<span class="string">&#x27;android:name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> name:</span><br><span class="line">                        features.add(<span class="string">f&#x27;COMPONENT:<span class="subst">&#123;comp_type&#125;</span>:<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 意图过滤器和元数据</span></span><br><span class="line">            <span class="keyword">for</span> intent_filter <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;intent-filter&#x27;</span>):</span><br><span class="line">                <span class="keyword">for</span> action <span class="keyword">in</span> intent_filter.find_all(<span class="string">&#x27;action&#x27;</span>):</span><br><span class="line">                    name = action.get(<span class="string">&#x27;android:name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> name:</span><br><span class="line">                        features.add(<span class="string">f&#x27;INTENT:<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line">                        </span><br><span class="line">            <span class="comment"># 应用元数据</span></span><br><span class="line">            application = soup.find(<span class="string">&#x27;application&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> application:</span><br><span class="line">                meta_data = application.find_all(<span class="string">&#x27;meta-data&#x27;</span>)</span><br><span class="line">                <span class="keyword">for</span> meta <span class="keyword">in</span> meta_data:</span><br><span class="line">                    name = meta.get(<span class="string">&#x27;android:name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> name:</span><br><span class="line">                        features.add(<span class="string">f&#x27;META:<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_resource_file</span>(<span class="params">res_file, decompiled_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个资源文件并生成特征&quot;&quot;&quot;</span></span><br><span class="line">    features = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(res_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            file_hash = hashlib.sha256(f.read()).hexdigest()</span><br><span class="line">            rel_path = os.path.relpath(res_file, decompiled_dir)</span><br><span class="line">            features.add(<span class="string">f&#x27;RES_HASH:<span class="subst">&#123;rel_path&#125;</span>:<span class="subst">&#123;file_hash&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_layout_file</span>(<span class="params">layout_file</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理布局文件并生成特征&quot;&quot;&quot;</span></span><br><span class="line">    features = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(layout_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            layout_type_count = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">            layout_tree = []</span><br><span class="line">            </span><br><span class="line">            soup = BeautifulSoup(f.read(), <span class="string">&#x27;xml&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> view <span class="keyword">in</span> soup.find_all(<span class="literal">True</span>):  <span class="comment"># True 查找所有标签</span></span><br><span class="line">                view_type = view.name.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]  <span class="comment"># 简化视图类型</span></span><br><span class="line">                layout_type_count[view_type] += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 视图深度</span></span><br><span class="line">                depth = <span class="built_in">len</span>(<span class="built_in">list</span>(view.parents)) - <span class="number">1</span></span><br><span class="line">                layout_tree.append(<span class="string">f&quot;<span class="subst">&#123;view_type&#125;</span>-<span class="subst">&#123;depth&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 添加布局特征</span></span><br><span class="line">            <span class="keyword">for</span> view_type, count <span class="keyword">in</span> layout_type_count.items():</span><br><span class="line">                features.add(<span class="string">f&#x27;LAYOUT_VIEW:<span class="subst">&#123;view_type&#125;</span>:<span class="subst">&#123;count&#125;</span>&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 布局树结构指纹</span></span><br><span class="line">            <span class="keyword">if</span> layout_tree:</span><br><span class="line">                tree_hash = hashlib.sha256(<span class="string">&#x27;&#x27;</span>.join(layout_tree).encode()).hexdigest()</span><br><span class="line">                features.add(<span class="string">f&#x27;LAYOUT_TREE:<span class="subst">&#123;os.path.basename(layout_file)&#125;</span>:<span class="subst">&#123;tree_hash&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_resource_features</span>(<span class="params">apk_path, decompiled_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;提取增强版资源特征&quot;&quot;&quot;</span></span><br><span class="line">    features = <span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1. AndroidManifest特征</span></span><br><span class="line">    manifest_path = os.path.join(decompiled_dir, <span class="string">&#x27;AndroidManifest.xml&#x27;</span>)</span><br><span class="line">    features |= extract_manifest_features(manifest_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 资源文件哈希</span></span><br><span class="line">    resource_files = []</span><br><span class="line">    res_dir = os.path.join(decompiled_dir, <span class="string">&#x27;res&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(res_dir):</span><br><span class="line">        <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(res_dir):</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="keyword">if</span> file.endswith((<span class="string">&#x27;.xml&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.webp&#x27;</span>, <span class="string">&#x27;.otf&#x27;</span>, <span class="string">&#x27;.ttf&#x27;</span>)):</span><br><span class="line">                    resource_files.append(os.path.join(root, file))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> res_file <span class="keyword">in</span> resource_files:</span><br><span class="line">        features |= process_resource_file(res_file, decompiled_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 布局文件结构分析</span></span><br><span class="line">    layout_dir = os.path.join(decompiled_dir, <span class="string">&#x27;res&#x27;</span>, <span class="string">&#x27;layout&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(layout_dir):</span><br><span class="line">        layout_files = glob.glob(os.path.join(layout_dir, <span class="string">&#x27;*.xml&#x27;</span>))</span><br><span class="line">        <span class="keyword">for</span> layout_file <span class="keyword">in</span> layout_files:</span><br><span class="line">            features |= process_layout_file(layout_file)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_native_libs</span>(<span class="params">apk_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;提取原生库特征&quot;&quot;&quot;</span></span><br><span class="line">    features = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(apk_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> z:</span><br><span class="line">            so_files = [name <span class="keyword">for</span> name <span class="keyword">in</span> z.namelist() </span><br><span class="line">                        <span class="keyword">if</span> name.startswith(<span class="string">&#x27;lib/&#x27;</span>) <span class="keyword">and</span> name.endswith(<span class="string">&#x27;.so&#x27;</span>)]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> so_name <span class="keyword">in</span> so_files:</span><br><span class="line">                <span class="keyword">with</span> z.<span class="built_in">open</span>(so_name) <span class="keyword">as</span> so_file:</span><br><span class="line">                    <span class="comment"># ELF头特征</span></span><br><span class="line">                    header = so_file.read(<span class="number">32</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(header) &lt; <span class="number">32</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    </span><br><span class="line">                    ei_class = header[<span class="number">4</span>]</span><br><span class="line">                    ei_data = header[<span class="number">5</span>]</span><br><span class="line">                    e_machine = header[<span class="number">18</span>:<span class="number">20</span>]</span><br><span class="line">                    </span><br><span class="line">                    features.add(<span class="string">f&#x27;ELF_CLASS:<span class="subst">&#123;ei_class&#125;</span>&#x27;</span>)</span><br><span class="line">                    features.add(<span class="string">f&#x27;ELF_DATA:<span class="subst">&#123;ei_data&#125;</span>&#x27;</span>)</span><br><span class="line">                    features.add(<span class="string">f&#x27;ELF_MACHINE:<span class="subst">&#123;<span class="built_in">int</span>.from_bytes(e_machine, <span class="string">&quot;little&quot;</span>)&#125;</span>&#x27;</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 节头特征</span></span><br><span class="line">                    so_file.seek(<span class="number">0</span>)</span><br><span class="line">                    data = so_file.read(<span class="number">4096</span>)</span><br><span class="line">                    section_names = <span class="built_in">set</span>(ELF_SECTION_PATTERN.findall(data))</span><br><span class="line">                    <span class="keyword">for</span> name <span class="keyword">in</span> section_names:</span><br><span class="line">                        features.add(<span class="string">f&#x27;ELF_SECTION:<span class="subst">&#123;name.decode()&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> features</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_minhash</span>(<span class="params">features, num_perm=NUM_PERM</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MinHash对象&quot;&quot;&quot;</span></span><br><span class="line">    m = MinHash(num_perm=num_perm)</span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">        m.update(feature.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_opcode_similarity</span>(<span class="params">vec1, vec2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算操作码向量的余弦相似度&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 获取操作码并集</span></span><br><span class="line">    all_opcodes = <span class="built_in">set</span>(vec1.keys()) | <span class="built_in">set</span>(vec2.keys())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建等长向量</span></span><br><span class="line">    v1 = np.array([vec1.get(op, <span class="number">0</span>) <span class="keyword">for</span> op <span class="keyword">in</span> all_opcodes])</span><br><span class="line">    v2 = np.array([vec2.get(op, <span class="number">0</span>) <span class="keyword">for</span> op <span class="keyword">in</span> all_opcodes])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算余弦相似度</span></span><br><span class="line">    similarity = cosine_similarity([v1], [v2])[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0.0</span>, <span class="built_in">min</span>(similarity, <span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_apk</span>(<span class="params">apk_path, decompile_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;处理单个APK并提取所有特征&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Decompiling &#x27;<span class="subst">&#123;apk_path&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> decompile_apk(apk_path, decompile_dir):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Failed to decompile <span class="subst">&#123;apk_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Extracting features...&quot;</span>)</span><br><span class="line">    <span class="comment"># 资源特征</span></span><br><span class="line">    res_features = extract_resource_features(apk_path, decompile_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 原生库特征</span></span><br><span class="line">    native_features = extract_native_libs(apk_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 控制流特征</span></span><br><span class="line">    cf_features = extract_control_flow_features(decompile_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 操作码特征</span></span><br><span class="line">    opcode_seq, opcode_vec = extract_opcode_vectors(decompile_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;res_features&#x27;</span>: res_features,</span><br><span class="line">        <span class="string">&#x27;native_features&#x27;</span>: native_features,</span><br><span class="line">        <span class="string">&#x27;cf_features&#x27;</span>: cf_features,</span><br><span class="line">        <span class="string">&#x27;opcode_seq&#x27;</span>: opcode_seq,</span><br><span class="line">        <span class="string">&#x27;opcode_vec&#x27;</span>: opcode_vec</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_similarities</span>(<span class="params">data1, data2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算所有相似度指标&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 组合所有特征</span></span><br><span class="line">    all_features1 = (</span><br><span class="line">        data1[<span class="string">&#x27;res_features&#x27;</span>] | </span><br><span class="line">        data1[<span class="string">&#x27;native_features&#x27;</span>] | </span><br><span class="line">        data1[<span class="string">&#x27;cf_features&#x27;</span>] | </span><br><span class="line">        &#123;<span class="string">f&#x27;OPSEQ:<span class="subst">&#123;data1[<span class="string">&quot;opcode_seq&quot;</span>]&#125;</span>&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    all_features2 = (</span><br><span class="line">        data2[<span class="string">&#x27;res_features&#x27;</span>] | </span><br><span class="line">        data2[<span class="string">&#x27;native_features&#x27;</span>] | </span><br><span class="line">        data2[<span class="string">&#x27;cf_features&#x27;</span>] | </span><br><span class="line">        &#123;<span class="string">f&#x27;OPSEQ:<span class="subst">&#123;data2[<span class="string">&quot;opcode_seq&quot;</span>]&#125;</span>&#x27;</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 结构相似度 (MinHash)</span></span><br><span class="line">    minhash_all1 = create_minhash(all_features1)</span><br><span class="line">    minhash_all2 = create_minhash(all_features2)</span><br><span class="line">    structure_sim = minhash_all1.jaccard(minhash_all2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 操作码相似度</span></span><br><span class="line">    opcode_sim = calculate_opcode_similarity(data1[<span class="string">&#x27;opcode_vec&#x27;</span>], data2[<span class="string">&#x27;opcode_vec&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 资源相似度</span></span><br><span class="line">    minhash_res1 = create_minhash(data1[<span class="string">&#x27;res_features&#x27;</span>])</span><br><span class="line">    minhash_res2 = create_minhash(data2[<span class="string">&#x27;res_features&#x27;</span>])</span><br><span class="line">    resource_sim = minhash_res1.jaccard(minhash_res2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加权综合相似度</span></span><br><span class="line">    weighted_sim = (</span><br><span class="line">        OPCODE_SIM_WEIGHT * opcode_sim +</span><br><span class="line">        STRUCTURE_SIM_WEIGHT * structure_sim +</span><br><span class="line">        RESOURCE_SIM_WEIGHT * resource_sim</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> opcode_sim, structure_sim, resource_sim, weighted_sim</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">apk_path1, apk_path2</span>):</span><br><span class="line">    <span class="comment"># 创建临时目录</span></span><br><span class="line">    <span class="keyword">with</span> tempfile.TemporaryDirectory() <span class="keyword">as</span> tmpdir1, tempfile.TemporaryDirectory() <span class="keyword">as</span> tmpdir2:</span><br><span class="line">        data1 = process_apk(apk_path1, tmpdir1)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data1:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">        data2 = process_apk(apk_path2, tmpdir2)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data2:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nCalculating similarities...&quot;</span>)</span><br><span class="line">        opcode_sim, structure_sim, resource_sim, weighted_sim = calculate_similarities(data1, data2)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">85</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Similarity Report:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Opcode Sequence Similarity: <span class="subst">&#123;opcode_sim:<span class="number">.4</span>f&#125;</span>  (Bytecode patterns)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Structural Similarity:      <span class="subst">&#123;structure_sim:<span class="number">.4</span>f&#125;</span>  (Resources/Control-Flow/Native)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Resource Similarity:        <span class="subst">&#123;resource_sim:<span class="number">.4</span>f&#125;</span>  (Manifest/Assets)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">85</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Weighted Similarity Score:  <span class="subst">&#123;weighted_sim:<span class="number">.4</span>f&#125;</span> (Opcode: <span class="subst">&#123;OPCODE_SIM_WEIGHT&#125;</span>w, Structural: <span class="subst">&#123;STRUCTURE_SIM_WEIGHT&#125;</span>w, Resource: <span class="subst">&#123;RESOURCE_SIM_WEIGHT&#125;</span>w)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">85</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 相似度解读</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nInterpretation:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> weighted_sim &gt; <span class="number">0.9</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;CRITICAL ALERT: Applications are nearly identical (high probability clone)&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> weighted_sim &gt; <span class="number">0.75</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;HIGH SIMILARITY: Significant code reuse detected (possible modified clone)&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> weighted_sim &gt; <span class="number">0.6</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;MODERATE SIMILARITY: Shared components/libraries (legitimate or borrowed)&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> weighted_sim &gt; <span class="number">0.4</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;LOW SIMILARITY: Minor similarities detected (common frameworks)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;MINIMAL SIMILARITY: Applications appear substantially different&quot;</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python apk_sim.py &lt;apk1&gt; &lt;apk2&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Example: python apk_sim.py hy.apk fl.apk&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    main(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;p&gt;通过多维度特征融合计算相似度：&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;graph LR
    A[APK] --&gt; B(操作码</summary>
      
    
    
    
    
    <category term="android" scheme="http://xiamianyu.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android混淆字典生成</title>
    <link href="http://xiamianyu.github.io/posts/pg-dict-gen/"/>
    <id>http://xiamianyu.github.io/posts/pg-dict-gen/</id>
    <published>2025-06-18T05:25:28.000Z</published>
    <updated>2025-11-01T05:13:01.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>python3 pg_dict_gen.py &lt;package_name&gt;</code></p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>pg_dict_gen.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_dict</span>(<span class="params"></span></span><br><span class="line"><span class="params">    charset=<span class="literal">None</span>, <span class="comment"># 字符集</span></span></span><br><span class="line"><span class="params">    numbers=<span class="literal">None</span>, <span class="comment"># 数字集</span></span></span><br><span class="line"><span class="params">    output_file=<span class="string">&quot;proguard-dict.txt&quot;</span>, <span class="comment"># 输出文件</span></span></span><br><span class="line"><span class="params">    limit=<span class="number">5000</span> <span class="comment"># 字典行数</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="keyword">if</span> charset <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        charset = <span class="built_in">list</span>(<span class="string">&quot;abcdefghijklmnopqrstuvwxyz_&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> numbers <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        numbers = <span class="built_in">list</span>(<span class="string">&quot;0123456789&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 首字符集：去重后打乱顺序</span></span><br><span class="line">    first_chars = <span class="built_in">list</span>(<span class="built_in">set</span>(charset))</span><br><span class="line">    random.shuffle(first_chars)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 全字符集 = 首字符集 + 数字集</span></span><br><span class="line">    all_chars = first_chars + numbers</span><br><span class="line">    </span><br><span class="line">    generated_set = <span class="built_in">set</span>() <span class="comment"># 用于检查重复</span></span><br><span class="line">    result_list = [] <span class="comment"># 存储生成的字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成长度从1开始的字符</span></span><br><span class="line">    curr_length = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(result_list) &lt; limit:</span><br><span class="line">        new_strings = []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 生成长度为curr_length的所有可能字符串</span></span><br><span class="line">        <span class="keyword">if</span> curr_length == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 长度为1时只能用首字符</span></span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> first_chars:</span><br><span class="line">                s = char</span><br><span class="line">                <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> generated_set:</span><br><span class="line">                    generated_set.add(s)</span><br><span class="line">                    new_strings.append(s)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 长度大于1时，使用现有字符串作为基础</span></span><br><span class="line">            <span class="keyword">for</span> base <span class="keyword">in</span> result_list:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(base) == curr_length - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">for</span> char <span class="keyword">in</span> all_chars:</span><br><span class="line">                        s = base + char</span><br><span class="line">                        <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> generated_set:</span><br><span class="line">                            generated_set.add(s)</span><br><span class="line">                            new_strings.append(s)</span><br><span class="line">                <span class="comment"># 如果已收集足够新字符串，提前退出</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(new_strings) &gt;= limit - <span class="built_in">len</span>(result_list):</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机打乱新生成的字符串顺序</span></span><br><span class="line">        random.shuffle(new_strings)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加到结果列表并打印</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> new_strings:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(result_list) &gt;= limit:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            result_list.append(s)</span><br><span class="line">        </span><br><span class="line">        curr_length += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Generating <span class="subst">&#123;<span class="built_in">len</span>(result_list)&#125;</span> chars finish &gt;&gt; <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;\n&quot;</span>.join(result_list))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 检查命令行参数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python pg_dict_gen.py &lt;package_name&gt;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Example: python pg_dict_gen.py com.live.huiyu&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    package_name = sys.argv[<span class="number">1</span>]  <span class="comment"># 从命令行获取包名</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Generating dictionary for package: <span class="subst">&#123;package_name&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成字符集：包名去掉点后加下划线，转换为字符列表</span></span><br><span class="line">    charset = <span class="built_in">list</span>(package_name.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;_&quot;</span>)</span><br><span class="line">    gen_dict(charset=charset)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;python3 pg_dict_gen.py &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;脚</summary>
      
    
    
    
    
    <category term="android" scheme="http://xiamianyu.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>如何拆分需求</title>
    <link href="http://xiamianyu.github.io/posts/user-story/"/>
    <id>http://xiamianyu.github.io/posts/user-story/</id>
    <published>2024-07-01T04:17:18.000Z</published>
    <updated>2025-11-01T05:16:24.877Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，需求（User Story）是用户视角，任务（Task）是企业内部执行视角，任务是可量化执行的最小单位。</p><p>以动态需求为例，可以拆分为以下任务：</p><ul><li>发布动态</li><li>动态列表</li><li>动态详情</li><li>我的动态</li><li>动态通知</li></ul><p>发布动态这个任务又可进一步拆分：</p><ul><li>发布动态-测试：撰写测试用例，产出用例文档以及执行测试用例</li><li>发布动态-UI：UI设计，产出设计稿</li><li>发布动态-H5：界面搭建+接口对接，产出交互界面</li><li>发布动态-Android：界面搭建+接口对接，产出交互界面</li><li>发布动态-iOS：界面搭建+接口对接，产出交互界面</li><li>发布动态-后端：接口实现，产出接口文档</li></ul><p>这样每个任务就能落实到具体的人身上，任务状态流转清晰，需求估时可控。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一般来说，需求（User Story）是用户视角，任务（Task）是企业内部执行视角，任务是可量化执行的最小单位。&lt;/p&gt;
&lt;p&gt;以动态需求为例，可以拆分为以下任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布动态&lt;/li&gt;
&lt;li&gt;动态列表&lt;/li&gt;
&lt;li&gt;动态详情&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="team-building" scheme="http://xiamianyu.github.io/tags/team-building/"/>
    
  </entry>
  
  <entry>
    <title>树莓派不落灰</title>
    <link href="http://xiamianyu.github.io/posts/exploring-rpi/"/>
    <id>http://xiamianyu.github.io/posts/exploring-rpi/</id>
    <published>2024-06-27T13:31:52.000Z</published>
    <updated>2025-10-31T13:21:51.264Z</updated>
    
    <content type="html"><![CDATA[<p>几年前，想买个云主机来玩一下服务端，朋友说还不如买个树莓派，价格便宜，低功耗，能装Linux，可7×24运行。</p><p>我想都没想就入手了个PI 4B（2G内存+32G存储），拿到手之后装上Raspbian Lite。</p><p>借助树莓派的蓝牙模块，用<a href="https://github.com/pulseaudio/pulseaudio">PluseAudio</a>将家里的老古董音响改造成蓝牙音响，手机连接树莓派的蓝牙即可播放音乐。</p><p>现在的在线音乐基本要开会员才能使用，所以我一直在收集MP3格式的音乐并存到NAS里。既然树莓派可以输出音频到音响，那可不可以在树莓派上装一个无界面的播放器，从NAS读取MP3文件并输出到音响呢？使用<a href="https://mpg123.de/">mpg123</a>就能满足这个需求。</p><p>mpg123每次播放音乐都要SSH进去服务器执行命令才能播放，非专业人士就不知道怎么使用了。想着让家里人都能共享音乐资源，最好是有界面可以访问，能选歌和播放，支持多用户。</p><p>于是用<a href="https://www.navidrome.org/docs/">Navidrome</a>搭建了Web在线音乐服务，读取NAS中的所有音乐。后来我还发现一款很棒的NAS音乐播放器<a href="https://music.aqzscn.cn/docs/intro">音流</a>，它可连接Navidrome，即可以播放在线音乐又能下载到本地，nice！</p><p>在寻找Web在线音乐服务时意外收获了<a href="https://emby.media/">Emby</a>，Emby不仅支持音频在线播放，还支持视频、图片和书籍的管理，可以说是NAS一站式服务。部署使用后发现Emby的书籍功能不支持在线浏览，有点遗憾。</p><p>家里的WiFi带宽有限，白天用的人多，网络特别卡，于是想弄个离线下载服务，在夜间人少时下载，充分利用闲时带宽。使用<a href="https://github.com/aria2/aria2">Aira2</a>+<a href="https://ariang.mayswind.net/">AriaNg</a>就能很好得满足这一需求。</p><p>家里的NAS仅支持SMB协议，访问方式比较受限，能不能搭建一个Web文件管理服务，读取NAS全部资源呢？最好还有读写权限控制，使用<a href="https://filebrowser.org/">File Browser</a>就可以搞定。</p><p>有了娃之后，我一直想着用树莓派做点什么。想到的第一个就是搭建一个博客，记录娃成长历程，以后娃也可以在上面写写日记啥的，便用<a href="https://hexo.io/zh-cn/">Hexo</a>+<a href="https://github.com/nginx/nginx">Nginx</a>搭了个静态博客。</p><p>好像还缺了点什么，怎么能没有游戏呢？对于游戏的选择，我还是想装经典单机游戏，找了很久，终于找到Web版<a href="https://hub.docker.com/r/wangz2019/jsnes/tags">FC Games</a>。</p><p>到此为止，树莓派上已经有很多好玩的东西了，等娃大一些还可以装<a href="https://github.com/scratchfoundation/scratch-gui">Scratch</a>少儿编程玩玩。</p><p>树莓派的负载如何？不想ssh+top查看的话，可以在服务器上部署<a href="https://nicolargo.github.io/glances/">Glances</a>，它不仅支持终端查看，还支持网页端查看，使用起来非常方便。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;几年前，想买个云主机来玩一下服务端，朋友说还不如买个树莓派，价格便宜，低功耗，能装Linux，可7×24运行。&lt;/p&gt;
&lt;p&gt;我想都没想就入手了个PI 4B（2G内存+32G存储），拿到手之后装上Raspbian Lite。&lt;/p&gt;
&lt;p&gt;借助树莓派的蓝牙模块，用&lt;a hr</summary>
      
    
    
    
    
    <category term="rpi" scheme="http://xiamianyu.github.io/tags/rpi/"/>
    
  </entry>
  
  <entry>
    <title>阶段性胜利</title>
    <link href="http://xiamianyu.github.io/posts/phased-victory/"/>
    <id>http://xiamianyu.github.io/posts/phased-victory/</id>
    <published>2023-12-01T06:25:30.000Z</published>
    <updated>2025-10-31T14:26:50.937Z</updated>
    
    <content type="html"><![CDATA[<p>17年的某个周末，我在城中村的河涌边溜达，突然接到老爸的电话。</p><p>这次聊天的话题有点沉重，老爸说大城市压力大，建议我回老家工作。</p><p>小城市很安逸，但也就那样了，我才毕业两年，这么早回老家，有点不甘心。</p><p>家里祖祖辈辈都是农民，现在务农越来越难，还不如去大城市闯一下。</p><p>在大城市扎根，可以享受更好的医疗和教育。</p><p>跟老爸谈了我的想法后，他从此不再提过此事。</p><p>但是我需要证明给老爸看，不是说说而已，于是我决定加快速度。</p><p>19年中，我终于说服领导辞去老家的工作，结束了异地恋，上来羊城一起奋斗。</p><p>领导上来后，我压力特别大，如果不能兑现承诺，就太对不住人家了。</p><p>这几年掉发，头发也白了不少，自嘲这是奋斗的痕迹。</p><p>今年终于兑现自己的承诺，在羊城定下来了。</p><p>宝宝也很快出生，人生即将进入下一个阶段。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;17年的某个周末，我在城中村的河涌边溜达，突然接到老爸的电话。&lt;/p&gt;
&lt;p&gt;这次聊天的话题有点沉重，老爸说大城市压力大，建议我回老家工作。&lt;/p&gt;
&lt;p&gt;小城市很安逸，但也就那样了，我才毕业两年，这么早回老家，有点不甘心。&lt;/p&gt;
&lt;p&gt;家里祖祖辈辈都是农民，现在务农越来</summary>
      
    
    
    
    
    <category term="essay" scheme="http://xiamianyu.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>技术之外</title>
    <link href="http://xiamianyu.github.io/posts/beyond-tech/"/>
    <id>http://xiamianyu.github.io/posts/beyond-tech/</id>
    <published>2022-03-27T14:10:10.000Z</published>
    <updated>2025-10-31T13:21:51.264Z</updated>
    
    <content type="html"><![CDATA[<p>最近几年有幸参与过一个产品从0到1再到10的开发，记录一下这个珍贵的历程。</p><p>产品上线不久后就实现了收支平衡，给了我们很大的信心。在接下来的半年里，马不停蹄补齐核心功能，业务也逐渐稳定，迭代节奏开始慢了下来。</p><p>这时我开始思考一个问题，我们的产品健康吗？看了一圈后台和第三方平台的数据，很多专业名词搞不懂。找了数据分析的书系统地学一遍，了解了一些业务指标如用户指标、行为指标、产品指标以及一些分析方法。</p><p>我就用这些业务指标和分析方法来核对自己的产品，心里就有个数，后续跟产品、运营和市场同学打交道时就能比较好地理解他们的诉求，有时候也会提出自己的想法。</p><p>业务稳定后，运营活动也多了起来。我就想，做了这么多活动，效果到底怎么样了？带着这些疑问，我开始找运营的书看，得知运营主要分用户运营、内容运营和活动运营。活动运营就是通过组织活动在短时间内快速提升相关指标的运营手段。</p><p>后来业务扩张需要投放，我又学习了投放方面的内容，了解了投放的业务指标如效果指标、KPI指标、财务指标以及归因原理。</p><p>前段时间运营同学提出一个召回流失用户的方案：PUSH打开指定页面。做技术选型时我发现FR和AF都能满足，但我又从投放的角度想，觉得AF更合适，因为打开指定页面还可以提高广告的转化率。</p><p>试想一下，如果一个用户在广告中看到一个主播，点击广告，下载App，打开App就自动进入她的资料页或直播间，那体验感肯定很好，而且现在的广告更关注留存和转化，这无疑是杀手锏。</p><p>经过这番折腾，自己对产品有了更全面的了解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近几年有幸参与过一个产品从0到1再到10的开发，记录一下这个珍贵的历程。&lt;/p&gt;
&lt;p&gt;产品上线不久后就实现了收支平衡，给了我们很大的信心。在接下来的半年里，马不停蹄补齐核心功能，业务也逐渐稳定，迭代节奏开始慢了下来。&lt;/p&gt;
&lt;p&gt;这时我开始思考一个问题，我们的产品健康</summary>
      
    
    
    
    
    <category term="essay" scheme="http://xiamianyu.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>关于NAT</title>
    <link href="http://xiamianyu.github.io/posts/about-nat/"/>
    <id>http://xiamianyu.github.io/posts/about-nat/</id>
    <published>2021-11-01T09:13:05.000Z</published>
    <updated>2025-10-31T14:03:03.958Z</updated>
    
    <content type="html"><![CDATA[<p>从主机位置来看：分内网主机（Inside）和外网主机（Outside）<br>从网络视角来看：分内网（Local）和外网（Global）</p><p>那么有以下组合：</p><ul><li>Inside Local：内网主机的IP地址，通常是一个私有地址</li><li>Inside Global：内网主机的对外IP地址，通常是外网地址，由ISP提供</li><li>Outside Local：外网主机的IP地址，不一定是外网地址</li><li>Outside Global：外网主机的对外IP地址，通常由ISP提供</li></ul><h2 id="完全圆锥型NAT"><a href="#完全圆锥型NAT" class="headerlink" title="完全圆锥型NAT"></a>完全圆锥型NAT</h2><p><img src="/../images/full-cone-nat.webp" alt="full-cone-nat"></p><ul><li>一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），所有发自iAddr:iPort的数据包都经由eAddr:ePort向外发送</li><li>任意外部主机都能经由发送数据包给eAddr:ePort到达iAddr:iPort</li></ul><h2 id="受限圆锥型NAT"><a href="#受限圆锥型NAT" class="headerlink" title="受限圆锥型NAT"></a>受限圆锥型NAT</h2><p><img src="/../images/restricted-cone-nat.webp" alt="restricted-cone-na"></p><ul><li>一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），所有发自iAddr:iPort的数据包都经由eAddr:ePort向外发送</li><li>只有iAddr:iPort曾经发送数据包到外部主机（nAddr:any），外部主机才能经由发送数据包给eAddr:ePort到达iAddr:iPort（注：any指外部主机源端口不受限制）</li></ul><h2 id="端口受限圆锥型NAT"><a href="#端口受限圆锥型NAT" class="headerlink" title="端口受限圆锥型NAT"></a>端口受限圆锥型NAT</h2><p><img src="/../images/port-restricted-cone-nat.webp" alt="port-restricted-cone-nat"></p><ul><li>一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），所有发自iAddr:iPort的数据包都经由eAddr:ePort向外发送</li><li>在受限圆锥型NAT基础上增加了外部主机源端口必须是固定的</li></ul><h2 id="对称NAT"><a href="#对称NAT" class="headerlink" title="对称NAT"></a>对称NAT</h2><p><img src="/../images/symmetric-nat.webp" alt="symmetric-nat"></p><ul><li>每一个来自相同内部IP与端口，到一个特定目的地IP和端口的请求，都映射到一个独特的外部IP和端口。同一内部IP与端口发到不同的目的地和端口的信息包，都使用不同的映射</li><li>只有曾经收到过内部主机数据的外部主机，才能够把数据包发回</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从主机位置来看：分内网主机（Inside）和外网主机（Outside）&lt;br&gt;从网络视角来看：分内网（Local）和外网（Global）&lt;/p&gt;
&lt;p&gt;那么有以下组合：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inside Local：内网主机的IP地址，通常是一个私有地址&lt;/li&gt;
&lt;</summary>
      
    
    
    
    
    <category term="net" scheme="http://xiamianyu.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>关于Packet</title>
    <link href="http://xiamianyu.github.io/posts/about-packet/"/>
    <id>http://xiamianyu.github.io/posts/about-packet/</id>
    <published>2021-09-14T12:01:35.000Z</published>
    <updated>2025-10-31T14:04:42.925Z</updated>
    
    <content type="html"><![CDATA[<p>在搭建Facebook ATC的过程中，发现<a href="https://www.netacad.com/cisco-packet-tracer">Cisco Packet Tracer</a>（简称PT）可以模拟二三层的工作原理，特别不错。</p><p>二层设备是交换机，三层设备是路由器。</p><h3 id="交换机的特点"><a href="#交换机的特点" class="headerlink" title="交换机的特点"></a>交换机的特点</h3><ul><li>有多个网口（通常24个以上）供终端主机连接</li><li>为同一局域网内的主机提供连接</li><li>不能为不同局域网或因特网提供连接</li></ul><h3 id="路由器的特点"><a href="#路由器的特点" class="headerlink" title="路由器的特点"></a>路由器的特点</h3><ul><li>网口比交换机少</li><li>为不同局域网提供连接</li><li>能发送数据到因特网</li></ul><p>我们通过一个简单的网络拓扑图来讲解包的生命周期。</p><p><img src="/../images/net-topology.webp" alt="net-topology"></p><p>从该网络拓扑图我们可以得到以下信息：</p><table><thead><tr><th align="center">设备</th><th align="center">局域网</th><th align="center">IP地址</th><th align="center">默认网关</th><th align="center">MAC地址</th></tr></thead><tbody><tr><td align="center">主机PC1</td><td align="center">局域网1<br>192.168.1.0&#x2F;24</td><td align="center">192.168.1.1</td><td align="center">192.168.1.254</td><td align="center">0011</td></tr><tr><td align="center">交换机SW1</td><td align="center">局域网1<br>192.168.1.0&#x2F;24</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">路由器R1左端口</td><td align="center">局域网1<br>192.168.1.0&#x2F;24</td><td align="center">192.168.1.254</td><td align="center">-</td><td align="center">1254</td></tr><tr><td align="center">路由器R1右端口</td><td align="center">局域网2<br>192.168.2.0&#x2F;24</td><td align="center">192.168.2.254</td><td align="center">-</td><td align="center">2254</td></tr><tr><td align="center">交换机SW2</td><td align="center">局域网2<br>192.168.2.0&#x2F;24</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">主机PC2</td><td align="center">局域网2<br>192.168.2.0&#x2F;24</td><td align="center">192.168.2.1</td><td align="center">192.168.2.254</td><td align="center">0021</td></tr></tbody></table><p>现在我们思考一个问题：PC1 ping PC2的具体过程是怎么样的？这个过程涉及跨子网通信，分三个阶段进行。</p><blockquote><p>阶段1：获取默认网关R1的MAC地址</p></blockquote><table><thead><tr><th align="center">步骤</th><th align="center">发起者</th><th>动作</th><th>备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">PC1</td><td>对目标IP与自身子网掩码做逻辑与运算</td><td>判断目标PC2不在同一子网，需通过默认网关转发</td></tr><tr><td align="center">2</td><td align="center">PC1</td><td>查询自身ARP缓存表</td><td>检查是否已存储默认网关R1的IP-MAC映射，发现未找到</td></tr><tr><td align="center">3</td><td align="center">PC1</td><td>向SW1发送ARP广播包（目标IP为R1）</td><td>请求获取默认网关R1的MAC地址</td></tr><tr><td align="center">4</td><td align="center">SW1</td><td>识别ARP包为广播包，除PC1连接端口外，向所有其他端口广播</td><td>将ARP查询请求传递给默认网关R1</td></tr><tr><td align="center">5</td><td align="center">R1</td><td>接收ARP广播包，检查头部发现目标IP为自身</td><td>确认自身是ARP查询的目标，准备回应</td></tr><tr><td align="center">6</td><td align="center">R1</td><td>向SW1发送ARP单播回应包（携带自身MAC地址）</td><td>告知PC1自己的MAC地址，供后续数据包封装使用</td></tr><tr><td align="center">7</td><td align="center">SW1</td><td>将R1的ARP单播回应包转发给PC1</td><td>传递网关MAC地址给发起查询的PC1</td></tr><tr><td align="center">8</td><td align="center">PC1</td><td>更新自身ARP缓存表，记录R1的IP-MAC映射</td><td>后续向网关发数据包时，无需重复发起ARP查询</td></tr></tbody></table><blockquote><p>阶段2：转发数据包至目标PC2</p></blockquote><table><thead><tr><th align="center">步骤</th><th align="center">发起者</th><th>动作</th><th>备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">PC1</td><td>封装目标为PC2的数据包（目标MAC为R1），发送给SW1</td><td>将跨子网数据包先发送给默认网关，由网关转发</td></tr><tr><td align="center">2</td><td align="center">SW1</td><td>将数据包转发给R1</td><td>基于目标R1的MAC，精准传递数据包至网关</td></tr><tr><td align="center">3</td><td align="center">R1</td><td>接收数据包，判断目标IP（PC2）所在子网在自身右端口</td><td>确定数据包的下一跳转发端口</td></tr><tr><td align="center">4</td><td align="center">R1</td><td>查询自身ARP缓存表，检查是否存储PC2的IP-MAC映射，发现未找到</td><td>确认需发起ARP查询获取PC2的MAC地址</td></tr><tr><td align="center">5</td><td align="center">R1</td><td>从右端口向SW2发送ARP广播包（目标IP为PC2）</td><td>请求获取PC2的MAC地址</td></tr><tr><td align="center">6</td><td align="center">SW2</td><td>识别ARP包为广播包，除R1连接端口外，向所有其他端口广播</td><td>将ARP查询请求传递给PC2</td></tr><tr><td align="center">7</td><td align="center">PC2</td><td>接收ARP广播包，检查头部发现目标IP为自身</td><td>确认自身是ARP查询的目标，准备回应</td></tr><tr><td align="center">8</td><td align="center">PC2</td><td>向SW2发送ARP单播回应包（携带自身MAC地址）</td><td>告知R1自己的MAC地址，供后续数据包封装使用</td></tr><tr><td align="center">9</td><td align="center">SW2</td><td>将PC2的ARP单播回应包转发给R1</td><td>传递目标PC的MAC地址给网关R1</td></tr><tr><td align="center">10</td><td align="center">R1</td><td>更新自身ARP缓存表，记录PC2的IP-MAC映射</td><td>后续向PC2发数据包时，无需重复发起ARP查询</td></tr><tr><td align="center">11</td><td align="center">R1</td><td>封装目标为PC2的数据包（目标MAC为PC2），发送给SW2</td><td>将数据包从右端口转发至目标PC所在子网的SW2</td></tr><tr><td align="center">12</td><td align="center">SW2</td><td>将数据包转发给PC2</td><td>基于目标MAC（PC2），精准传递数据包至目标主机</td></tr><tr><td align="center">13</td><td align="center">PC2</td><td>接收并处理R1转发的数据包</td><td>完成跨子网数据包的接收</td></tr></tbody></table><blockquote><p>阶段3：PC2向PC1回传回应数据包</p></blockquote><table><thead><tr><th align="center">步骤</th><th align="center">发起者</th><th>动作</th><th>备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">PC2</td><td>查询自身ARP缓存表，确认已存储R1的IP-MAC映射（此前通信中已记录）</td><td>无需重复发起ARP查询，直接使用缓存的网关MAC</td></tr><tr><td align="center">2</td><td align="center">PC2</td><td>封装回应数据包（目标MAC为R1），发送给SW2</td><td>将回应包先发送给网关，由网关回传PC1</td></tr><tr><td align="center">3</td><td align="center">SW2</td><td>将回应数据包转发给R1</td><td>基于目标MAC（R1），传递回应包至网关</td></tr><tr><td align="center">4</td><td align="center">R1</td><td>查询自身ARP缓存表，确认已存储PC1的IP-MAC映射（阶段1已记录）</td><td>无需重复发起ARP查询，直接使用缓存的PC1 MAC</td></tr><tr><td align="center">5</td><td align="center">R1</td><td>封装回应数据包（目标MAC为PC1），发送给SW1</td><td>将回应包转发至PC1所在子网的交换机</td></tr><tr><td align="center">6</td><td align="center">SW1</td><td>将回应数据包转发给PC1</td><td>基于目标MAC（PC1），精准传递回应包至发起端</td></tr><tr><td align="center">7</td><td align="center">PC1</td><td>接收并处理PC2的回应数据包</td><td>完成整个跨子网通信的“请求-回应”闭环</td></tr></tbody></table><p>我们留意到，整个过程涉及到三张表：</p><ul><li>交换机有MAC地址表，存储着MAC地址和端口的映射关系</li><li>路由器有路由表，存储着IP和端口的映射关系</li><li>主机和路由器都有ARP缓存表，存储着IP和MAC地址的映射关系</li></ul><p>这三张表是怎么来的：</p><ul><li>MAC地址表通过局域网内各节点之间不断通过交换机通信逐步完善起来的</li><li>路由表是各种路由算法+人工配置逐步完善起来的</li><li>ARP缓存表是不断通过ARP协议的请求逐步完善起来的</li></ul><p>如果用PT单步调式，你会发现原始包的目标IP始终不变，变的只是目标MAC地址，所以其实三层并不具备传输包的功能，而是靠二层去传输。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在搭建Facebook ATC的过程中，发现&lt;a href=&quot;https://www.netacad.com/cisco-packet-tracer&quot;&gt;Cisco Packet Tracer&lt;/a&gt;（简称PT）可以模拟二三层的工作原理，特别不错。&lt;/p&gt;
&lt;p&gt;二层设备是交</summary>
      
    
    
    
    
    <category term="net" scheme="http://xiamianyu.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>搭建Facebook ATC</title>
    <link href="http://xiamianyu.github.io/posts/deploy-atc/"/>
    <id>http://xiamianyu.github.io/posts/deploy-atc/</id>
    <published>2021-08-27T09:36:50.000Z</published>
    <updated>2025-10-31T13:21:51.264Z</updated>
    
    <content type="html"><![CDATA[<p>搭建Facebook ATC（简称ATC）的首要条件是主机能发射热点，笔记本一般标配无线网卡，PC没有无线网卡的需要买一个。</p><p>我的搭建方案是<code>VirtualBox + Ubuntu-Desktop + USB无线网卡</code>，通过VirtualBox的USB选项，把无线网卡挂载到Ubuntu上。</p><p>创建虚拟机时，网络连接模式一般选用NAT或桥接，我用桥接模式，这样手机连了热点就能访问内外网。虚拟机网络连接模式如下：</p><table><thead><tr><th align="center">Model</th><th align="center">VM &gt; Host</th><th align="center">Host &gt; VM</th><th align="center">VM &lt; &gt; VM</th><th align="center">VM &gt; Internet</th><th align="center">Internet &gt; VM</th></tr></thead><tbody><tr><td align="center">Bridged</td><td align="center">+</td><td align="center">+</td><td align="center">+</td><td align="center">+</td><td align="center">+</td></tr><tr><td align="center">NAT</td><td align="center">+</td><td align="center">Port Forwarding</td><td align="center">-</td><td align="center">+</td><td align="center">Port Forwarding</td></tr><tr><td align="center">NAT Network</td><td align="center">+</td><td align="center">Port Forwarding</td><td align="center">+</td><td align="center">+</td><td align="center">Port Forwarding</td></tr><tr><td align="center">Host-only</td><td align="center">+</td><td align="center">+</td><td align="center">+</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">Internal</td><td align="center">-</td><td align="center">-</td><td align="center">+</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><p>我的无线网卡是<code>COMFAST CF-811AC</code>，从官网下载的驱动安装失败，后来在GitHub上发现有它的<a href="https://github.com/brektrou/rtl8821CU">驱动源码</a>，下载下来编译安装就可以了，重启Ubuntu生效。通过<code>ifconfig</code>命令，看到<code>wlx200db04f5f01</code>就说明无线网卡能用了。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">enp0s3</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">192.168.0.207</span>  netmask <span class="number">255.255.252.0</span>  broadcast <span class="number">192.168.3.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe80::<span class="number">32</span>dd:f717:<span class="number">7</span>b29:cee9  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x20&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">27</span>:<span class="number">0</span>b:<span class="number">7</span>e:<span class="number">65</span>  txqueuelen <span class="number">1000</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">442428</span>  bytes <span class="number">417116093</span> (<span class="number">417</span>.<span class="number">1</span> MB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">168300</span>  bytes <span class="number">21261861</span> (<span class="number">21</span>.<span class="number">2</span> MB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">lo</span>: flags=<span class="number">73</span>&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="number">65536</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">127.0.0.1</span>  netmask <span class="number">255.0.0.0</span></span><br><span class="line">        <span class="attribute">inet6</span> ::<span class="number">1</span>  prefixlen <span class="number">128</span>  scopeid <span class="number">0</span>x10&lt;host&gt;</span><br><span class="line">        <span class="attribute">loop</span>  txqueuelen <span class="number">1000</span>  (Local Loopback)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">11430</span>  bytes <span class="number">948726</span> (<span class="number">948</span>.<span class="number">7</span> KB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">11430</span>  bytes <span class="number">948726</span> (<span class="number">948</span>.<span class="number">7</span> KB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">wlx200db04f5f01</span>: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        <span class="attribute">inet</span> <span class="number">10.42.0.1</span>  netmask <span class="number">255.255.255.0</span>  broadcast <span class="number">10.42.0.255</span></span><br><span class="line">        <span class="attribute">inet6</span> fe80::<span class="number">220</span>d:b0ff:fe4f:<span class="number">5</span>f01  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x20&lt;link&gt;</span><br><span class="line">        <span class="attribute">ether</span> <span class="number">20</span>:<span class="number">0</span>d:b0:<span class="number">4</span>f:<span class="number">5</span>f:<span class="number">01</span>  txqueuelen <span class="number">1000</span>  (Ethernet)</span><br><span class="line">        <span class="attribute">RX</span> packets <span class="number">162441</span>  bytes <span class="number">25230166</span> (<span class="number">25</span>.<span class="number">2</span> MB)</span><br><span class="line">        <span class="attribute">RX</span> errors <span class="number">0</span>  dropped <span class="number">40</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></span><br><span class="line">        <span class="attribute">TX</span> packets <span class="number">305575</span>  bytes <span class="number">403071992</span> (<span class="number">403</span>.<span class="number">0</span> MB)</span><br><span class="line">        <span class="attribute">TX</span> errors <span class="number">0</span>  dropped <span class="number">2953</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></span><br></pre></td></tr></table></figure><p>接下来就是设置热点。通过<code>nm-connection-editor</code>命令打开网络连接管理界面，将WiFi设置为热点模式，如果不想热点的信道被干扰，可以选择5G频段，但是一些老的手机是搜不到5G频段的，这个自己权衡一下。热点发射成功后，手机连上热点，看能否使用内外网，没问题就可以往下走。</p><p>根据官方的<a href="https://github.com/facebookarchive/augmented-traffic-control">教程</a>，我们必须先安装好Python2-pip才能把ATC安装好。前面我也说了，ATC是爷爷辈的项目，比较老，直接<code>sudo apt-get install python-pip</code>是安装不了的，还好一个好心的哥哥写了<a href="https://blog.csdn.net/drivery/article/details/108823167">教程</a>：</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先启用Universe存储库</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">add-apt-repository</span> <span class="string">universe</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新程序包索引并安装Python2</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">apt</span> <span class="string">update</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">apt</span> <span class="string">install</span> <span class="string">python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用curl下载get-pip.py脚本</span></span><br><span class="line"><span class="string">curl</span> <span class="string">https</span>://<span class="string">bootstrap</span>.<span class="string">pypa</span>.<span class="string">io</span>/<span class="built_in">get-pip.py</span> <span class="built_in">--output</span> <span class="built_in">get-pip.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装pip</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">python</span> <span class="built_in">get-pip.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pip版本</span></span><br><span class="line"><span class="string">pip</span> <span class="built_in">--version</span></span><br></pre></td></tr></table></figure><p>pip安装成功后，你离成功就不远了。我们继续：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ATC</span></span><br><span class="line"><span class="built_in">sudo</span> pip install atc_thrift atcd django-atc-api django-atc-demo-ui django-atc-profile-storage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建atcui</span></span><br><span class="line"><span class="built_in">sudo</span> django-admin startproject atcui</span><br></pre></td></tr></table></figure><p>打开<code>atcui/settings.py</code>，添加以下配置项：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Django ATC API</span></span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;atc_api&#x27;</span>,</span><br><span class="line">    <span class="comment"># Django ATC Demo UI</span></span><br><span class="line">    <span class="string">&#x27;bootstrap_themes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django_static_jquery&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;atc_demo_ui&#x27;</span>,</span><br><span class="line">    <span class="comment"># Django ATC Profile Storage</span></span><br><span class="line">    <span class="string">&#x27;atc_profile_storage&#x27;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>打开atcui&#x2F;urls.py，添加以下配置项：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">from</span> django.views.generic.base <span class="keyword">import</span> RedirectView</span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Django ATC API</span></span><br><span class="line">    url(<span class="string">r&#x27;^api/v1/&#x27;</span>, include(<span class="string">&#x27;atc_api.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># Django ATC Demo UI</span></span><br><span class="line">    url(<span class="string">r&#x27;^atc_demo_ui/&#x27;</span>, include(<span class="string">&#x27;atc_demo_ui.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># Django ATC profile storage</span></span><br><span class="line">    url(<span class="string">r&#x27;^api/v1/profiles/&#x27;</span>, include(<span class="string">&#x27;atc_profile_storage.urls&#x27;</span>)),</span><br><span class="line">    url(<span class="string">r&#x27;^$&#x27;</span>, RedirectView.as_view(url=<span class="string">&#x27;/atc_demo_ui/&#x27;</span>, permanent=<span class="literal">False</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>更新数据库</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">python</span> manage.<span class="keyword">py</span> migrate</span><br></pre></td></tr></table></figure><p>启动atcd</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用虚拟机搭建ATC，atcd需要指定wan和lan</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">atcd</span> <span class="built_in">--atcd-wan</span> <span class="string">enp0s3</span> <span class="built_in">--atcd-lan</span> <span class="string">wlx200db04f5f01</span></span><br></pre></td></tr></table></figure><p>启动atcui</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span> manage.py runserver <span class="number">0.0.0.0:8000</span></span><br></pre></td></tr></table></figure><p>到这里，ATC就搭建好了。通过<code>ifconfig</code>找到无线网卡的inet，比如IP是<code>10.42.0.1</code>，浏览器输入<code>10.42.0.1:8000</code>即可访问。</p><p>如果不想自己配置网络类型，可以使用官方默认的：</p><ul><li>2G - Developing Rural</li><li>2G - Developing Urban</li><li>3G - Average</li><li>3G - Good</li><li>Cable</li><li>DSL</li><li>Edge - Average</li><li>Edge - Good</li><li>Edge - Lossy</li><li>No Connectivity</li></ul><p>配置官方默认的网络类型</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">utils/<span class="keyword">restore</span>-profiles.<span class="keyword">sh</span> 0.0.0.0:8000</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;搭建Facebook ATC（简称ATC）的首要条件是主机能发射热点，笔记本一般标配无线网卡，PC没有无线网卡的需要买一个。&lt;/p&gt;
&lt;p&gt;我的搭建方案是&lt;code&gt;VirtualBox + Ubuntu-Desktop + USB无线网卡&lt;/code&gt;，通过Virtual</summary>
      
    
    
    
    
    <category term="net" scheme="http://xiamianyu.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>1v1通话流程</title>
    <link href="http://xiamianyu.github.io/posts/1v1-call-flow/"/>
    <id>http://xiamianyu.github.io/posts/1v1-call-flow/</id>
    <published>2020-09-21T08:00:59.000Z</published>
    <updated>2025-10-31T14:07:17.329Z</updated>
    
    <content type="html"><![CDATA[<p>泛娱乐音视频社交App的1v1通话流程梳理。</p><h2 id="通话操作"><a href="#通话操作" class="headerlink" title="通话操作"></a>通话操作</h2><ul><li>拨打方：dial, cancel</li><li>接听方：accept, reject</li><li>通话双方：hang</li></ul><h2 id="通话状态"><a href="#通话状态" class="headerlink" title="通话状态"></a>通话状态</h2><ul><li>IDLE</li><li>WAITING</li><li>CONNECTED</li></ul><h2 id="通话状态机"><a href="#通话状态机" class="headerlink" title="通话状态机"></a>通话状态机</h2><table><thead><tr><th align="center">当前状态</th><th align="center">触发事件</th><th align="center">目标状态</th></tr></thead><tbody><tr><td align="center">IDLE</td><td align="center">dial</td><td align="center">WAITING</td></tr><tr><td align="center">WAITING</td><td align="center">cancel</td><td align="center">IDLE</td></tr><tr><td align="center">WAITING</td><td align="center">reject</td><td align="center">IDLE</td></tr><tr><td align="center">WAITING</td><td align="center">timeout(sys)</td><td align="center">IDLE</td></tr><tr><td align="center">WAITING</td><td align="center">accept</td><td align="center">CONNECTED</td></tr><tr><td align="center">CONNECTED</td><td align="center">hang</td><td align="center">IDLE</td></tr></tbody></table><h2 id="通话时序图"><a href="#通话时序图" class="headerlink" title="通话时序图"></a>通话时序图</h2><ul><li>通话建立&#x2F;挂断</li></ul><table><thead><tr><th align="center">步骤</th><th align="center">User A（拨打方）</th><th align="center"></th><th align="center">App Server</th><th align="center"></th><th align="center">User B（接听方）</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">显示拨打页面</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">请求拨打API:<br>&#x2F;call&#x2F;dial</td><td align="center">&gt;</td><td align="center">发送来电IM:<br>RING</td><td align="center">&gt;</td><td align="center">收到来电IM:<br>RING</td><td align="center">A拨打B</td></tr><tr><td align="center">3</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">显示接听页面</td><td align="center"></td></tr><tr><td align="center">4</td><td align="center">收到被接听IM:<br>RING_ACCEPT</td><td align="center">&lt;</td><td align="center">发送被接听IM:<br>RING_ACCEPT</td><td align="center">&lt;</td><td align="center">请求接听API:<br>&#x2F;call&#x2F;accept</td><td align="center">B接听A</td></tr><tr><td align="center">5</td><td align="center">显示通话页面</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">显示通话页面</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center">加入RTC频道</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">加入RTC频道</td><td align="center"></td></tr><tr><td align="center">7</td><td align="center">请求开始通话API:<br>&#x2F;call&#x2F;start</td><td align="center">&gt;</td><td align="center">开始通话</td><td align="center">&lt;</td><td align="center">请求开始通话API:<br>&#x2F;call&#x2F;start</td><td align="center">通话建立</td></tr><tr><td align="center">8</td><td align="center">请求心跳API:<br>&#x2F;call&#x2F;hb</td><td align="center">&gt;</td><td align="center">校验A心跳</td><td align="center"></td><td align="center"></td><td align="center">A发送心跳</td></tr><tr><td align="center">9</td><td align="center"></td><td align="center"></td><td align="center">校验B心跳</td><td align="center">&lt;</td><td align="center">请求心跳API:<br>&#x2F;call&#x2F;hb</td><td align="center">B发送心跳</td></tr><tr><td align="center">若挂断</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">10</td><td align="center">请求挂断API:<br>&#x2F;call&#x2F;hang</td><td align="center">&gt;</td><td align="center">发送被挂断IM:<br>HANG</td><td align="center">&gt;</td><td align="center">收到被挂断IM:<br>HANG</td><td align="center">A挂断B</td></tr><tr><td align="center">11</td><td align="center">结束心跳</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">结束心跳</td><td align="center"></td></tr><tr><td align="center">12</td><td align="center">退出RTC频道</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">退出RTC频道</td><td align="center"></td></tr><tr><td align="center">13</td><td align="center">显示结束页面</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">显示结束页面</td><td align="center"></td></tr></tbody></table><ul><li>通话取消&#x2F;拒绝&#x2F;超时</li></ul><table><thead><tr><th align="center">步骤</th><th align="center">User A（拨打方）</th><th align="center"></th><th align="center">App Server</th><th align="center"></th><th align="center">User B（接听方）</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">显示拨打页面</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">请求拨打API:<br>&#x2F;call&#x2F;dial</td><td align="center">&gt;</td><td align="center">发送来电IM:<br>RING</td><td align="center">&gt;</td><td align="center">收到来电IM:<br>RING</td><td align="center">A拨打B</td></tr><tr><td align="center">3</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">显示接听页面</td><td align="center"></td></tr><tr><td align="center">4-若<br>取消</td><td align="center">请求取消API:<br>&#x2F;call&#x2F;cancel</td><td align="center">&gt;</td><td align="center">发送被取消IM:<br>RING_CANCEL</td><td align="center">&gt;</td><td align="center">收到被取消IM:<br>RING_CANCEL</td><td align="center">A取消B</td></tr><tr><td align="center">4-若<br>拒绝</td><td align="center">收到被拒绝IM:<br>RING_REJECT</td><td align="center">&lt;</td><td align="center">发送被拒绝IM:<br>RING_REJECT</td><td align="center">&lt;</td><td align="center">请求拒绝API:<br>&#x2F;call&#x2F;reject</td><td align="center">B拒绝A</td></tr><tr><td align="center">4-若<br>超时</td><td align="center">接收超时IM:<br>RING_TIMEOUT</td><td align="center">&lt;</td><td align="center">发送超时IM:<br>RING_TIMEOUT</td><td align="center">&gt;</td><td align="center">收到超时IM:<br>RING_TIMEOUT</td><td align="center">来电超时</td></tr><tr><td align="center">5</td><td align="center">关闭拨打页面</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">关闭接听页面</td><td align="center"></td></tr></tbody></table><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ul><li>&#x2F;call&#x2F;dial：拨打</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">req<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span> <span class="comment">// 自身uid</span></span><br><span class="line">  <span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span> <span class="number">456</span><span class="punctuation">,</span> <span class="comment">// 对方uid</span></span><br><span class="line">  <span class="attr">&quot;callType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VIDEO/AUDIO&quot;</span> <span class="comment">// 通话类型</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">res<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span><span class="punctuation">,</span> <span class="comment">// 通话ID</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25金币/分钟&quot;</span> <span class="comment">// 价格</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 对方用户信息</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>&#x2F;call&#x2F;cancel：取消</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">req<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span> <span class="comment">// 自身uid</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span><span class="punctuation">,</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">res<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>&#x2F;call&#x2F;accept：接听</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">req<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span> <span class="comment">// 自身uid</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">res<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span><span class="punctuation">,</span> <span class="comment">// 通话ID</span></span><br><span class="line">  <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 频道信息</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> <span class="comment">// 频道名称</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span> <span class="comment">// 频道token</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>&#x2F;call&#x2F;reject：拒绝</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">req<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span> <span class="comment">// 自身uid</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">res<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>&#x2F;call&#x2F;hang：挂断</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">req<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span> <span class="comment">// 自身uid</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">res<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>&#x2F;call&#x2F;hb：发送心跳</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">req<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span> <span class="comment">// 自身uid</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">res<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>&#x2F;call&#x2F;start：开始通话</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">req<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span> <span class="comment">// 自身uid</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">res<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="IM"><a href="#IM" class="headerlink" title="IM"></a>IM</h2><ul><li>RING：来电</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RING&quot;</span><span class="punctuation">,</span> <span class="comment">// 来电</span></span><br><span class="line">  <span class="attr">&quot;callType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;VIDEO/AUDIO&quot;</span><span class="punctuation">,</span> <span class="comment">// 通话类型</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span><span class="punctuation">,</span> <span class="comment">// 通话ID</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;25金币/分钟&quot;</span> <span class="comment">// 价格</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 对方用户信息</span></span><br><span class="line">    <span class="attr">&quot;uid&quot;</span><span class="punctuation">:</span> <span class="number">123</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>RING_ACCEPT：来电被接听</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RING_ACCEPT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span><span class="punctuation">,</span> <span class="comment">// 通话ID</span></span><br><span class="line">  <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 频道信息</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;abc&quot;</span><span class="punctuation">,</span> <span class="comment">// 频道名称</span></span><br><span class="line">    <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span> <span class="comment">// 频道token</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>RING_CANCEL：来电被取消</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RING_CANCEL&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>RING_REJECT：来电被拒</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RING_REJECT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>RING_TIMEOUT：来电超时</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RING_TIMEOUT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>HANG：通话被挂断</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HANG&quot;</span><span class="punctuation">,</span> <span class="comment">// 通话被挂断</span></span><br><span class="line">  <span class="attr">&quot;callId&quot;</span><span class="punctuation">:</span> <span class="number">789</span> <span class="comment">// 通话ID</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;泛娱乐音视频社交App的1v1通话流程梳理。&lt;/p&gt;
&lt;h2 id=&quot;通话操作&quot;&gt;&lt;a href=&quot;#通话操作&quot; class=&quot;headerlink&quot; title=&quot;通话操作&quot;&gt;&lt;/a&gt;通话操作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;拨打方：dial, cancel&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="av" scheme="http://xiamianyu.github.io/tags/av/"/>
    
  </entry>
  
  <entry>
    <title>连麦云端合图</title>
    <link href="http://xiamianyu.github.io/posts/guestlive-mix/"/>
    <id>http://xiamianyu.github.io/posts/guestlive-mix/</id>
    <published>2020-06-28T08:00:59.000Z</published>
    <updated>2025-10-31T13:21:51.264Z</updated>
    
    <content type="html"><![CDATA[<p>连麦合图有两个方案，一是云端合图，二是App端合图，一般推荐使用云端合图，因为App端合图需要多路播放，对手机性能要求较高。</p><p>连麦的界面布局一般是大小屏，如下图：<br><img src="/../images/guestlive-stream1.webp" alt="guestlive-stream1"></p><p>这里有两个问题需要解决：</p><ol><li>手机分辨率碎片化严重，合图会被裁剪，怎么避免连麦用户视频画面被裁剪？</li><li>连麦用户视频画面和连麦用户信息如何吻合？</li></ol><p>从大数据中了解到，手机分辨率高宽比在1.7~2.1之间，未来手机分辨率高宽比呈增大趋势。连麦用户放置在右下角时，其右边比底部更容易被裁剪，所以在旁路推流参数中，主播宽高比应该接近2.1。在实践中发现，将主播的分辨率设为960x480，连麦用户的分辨率设为200x160，再调整连麦用户的左边距和上边距就可以解决问题一。</p><p><img src="/../images/guestlive-stream2.webp" alt="guestlive-stream2"></p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> aw = <span class="number">480</span>; <span class="comment">// 主播的宽度</span></span><br><span class="line"><span class="keyword">int</span> ah = <span class="number">960</span>; <span class="comment">// 主播的高度</span></span><br><span class="line"><span class="keyword">int</span> gw = <span class="number">160</span>; <span class="comment">// 连麦用户的宽度</span></span><br><span class="line"><span class="keyword">int</span> gh = <span class="number">200</span>; <span class="comment">// 连麦用户的高度</span></span><br><span class="line"><span class="keyword">int</span> leftMargin = aw <span class="regexp">/ 2 + 5 * (aw /</span> <span class="number">2</span> - gw) <span class="regexp">/ 6; /</span>/ 连麦用户的左边距</span><br><span class="line"><span class="keyword">int</span> topMargin = ah <span class="regexp">/ 2 + 2 * (ah /</span> <span class="number">2</span> - gh) <span class="regexp">/ 5; /</span>/ 连麦用户的上边距</span><br></pre></td></tr></table></figure><p>接下来看看问题二，合图被裁剪有两种情况：</p><ol><li><p>合图高宽比大于屏幕高宽比，基于屏幕宽等比例拉伸，垂直方向裁剪<br><img src="/../images/guestlive-adapter-vertical.webp" alt="guestlive-adapter-vertical"></p></li><li><p>合图高宽比小于屏幕高宽比，基于屏幕高等比例拉伸，水平方向被裁剪<br><img src="/../images/guestlive-adapter-horizontal.webp" alt="guestlive-adapter-horizontal"></p></li></ol><p>基于旁路推流参数和合图被裁剪的分析，可以得出连麦用户和连麦UI窗口的吻合参数：</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">float</span> aRatio = (<span class="built_in">float</span>) ah / aw; <span class="comment">// 合图高宽比</span></span><br><span class="line"><span class="built_in">float</span> sRatio = (<span class="built_in">float</span>) sh / sw; <span class="comment">// 屏幕高宽比</span></span><br><span class="line"><span class="built_in">int</span> leftMargin; <span class="comment">// 连麦UI窗口的左边距</span></span><br><span class="line"><span class="built_in">int</span> topMargin; <span class="comment">// 连麦UI窗口的上边距</span></span><br><span class="line"><span class="built_in">int</span> scaleGw; <span class="comment">// 拉伸后的连麦UI窗口宽度</span></span><br><span class="line"><span class="built_in">int</span> scaleGh; <span class="comment">// 拉伸后的连麦UI窗口高度</span></span><br><span class="line"><span class="keyword">if</span> (aRatio &gt; sRatio) &#123; <span class="comment">// 合图高宽比大于屏幕高宽比</span></span><br><span class="line">    <span class="built_in">float</span> scaleRatio = (<span class="built_in">float</span>) sw / aw;</span><br><span class="line">    <span class="built_in">int</span> scaleAw = (<span class="built_in">int</span>) (scaleRatio * aw);</span><br><span class="line">    <span class="built_in">int</span> scaleAh = (<span class="built_in">int</span>) (scaleRatio * ah);</span><br><span class="line">    scaleGw = (<span class="built_in">int</span>) (scaleRatio * gw);</span><br><span class="line">    scaleGh = (<span class="built_in">int</span>) (scaleRatio * gh);</span><br><span class="line">    leftMargin = scaleAw / <span class="number">2</span> + <span class="number">5</span> * (scaleAw / <span class="number">2</span> - scaleGw) / <span class="number">6</span>;</span><br><span class="line">    topMargin = scaleAh / <span class="number">2</span> + <span class="number">2</span> * (scaleAh / <span class="number">2</span> - scaleGh) / <span class="number">5</span> - (scaleAh - sh) / <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (aRatio &lt; sRatio) &#123; <span class="comment">// 合图高宽比小于屏幕高宽比</span></span><br><span class="line">    <span class="built_in">float</span> scaleRatio = (<span class="built_in">float</span>) sh / ah; <span class="comment">// 小窗口缩放比</span></span><br><span class="line">    <span class="built_in">int</span> scaleAw = (<span class="built_in">int</span>) (scaleRatio * aw);</span><br><span class="line">    <span class="built_in">int</span> scaleAh = (<span class="built_in">int</span>) (scaleRatio * ah);</span><br><span class="line">    scaleGw = (<span class="built_in">int</span>) (scaleRatio * gw);</span><br><span class="line">    scaleGh = (<span class="built_in">int</span>) (scaleRatio * gh);</span><br><span class="line">    leftMargin = scaleAw / <span class="number">2</span> + <span class="number">5</span> * (scaleAw / <span class="number">2</span> - scaleGw) / <span class="number">6</span> - (scaleAw - sw) / <span class="number">2</span>;</span><br><span class="line">    topMargin = scaleAh / <span class="number">2</span> + <span class="number">2</span> * (scaleAh / <span class="number">2</span> - scaleGh) / <span class="number">5</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 合图高宽比等于屏幕高宽比</span></span><br><span class="line">    <span class="built_in">float</span> scaleRatio = (<span class="built_in">float</span>) sw / aw;</span><br><span class="line">    <span class="built_in">int</span> scaleAw = (<span class="built_in">int</span>) (scaleRatio * aw);</span><br><span class="line">    <span class="built_in">int</span> scaleAh = (<span class="built_in">int</span>) (scaleRatio * ah);</span><br><span class="line">    scaleGw = (<span class="built_in">int</span>) (scaleRatio * gw);</span><br><span class="line">    scaleGh = (<span class="built_in">int</span>) (scaleRatio * gh);</span><br><span class="line">    leftMargin = scaleAw / <span class="number">2</span> + <span class="number">5</span> * (scaleAw / <span class="number">2</span> - scaleGw) / <span class="number">6</span>;</span><br><span class="line">    topMargin = scaleAh / <span class="number">2</span> + <span class="number">2</span> * (scaleAh / <span class="number">2</span> - scaleGh) / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;连麦合图有两个方案，一是云端合图，二是App端合图，一般推荐使用云端合图，因为App端合图需要多路播放，对手机性能要求较高。&lt;/p&gt;
&lt;p&gt;连麦的界面布局一般是大小屏，如下图：&lt;br&gt;&lt;img src=&quot;/../images/guestlive-stream1.webp&quot; </summary>
      
    
    
    
    
    <category term="av" scheme="http://xiamianyu.github.io/tags/av/"/>
    
  </entry>
  
  <entry>
    <title>直播种类</title>
    <link href="http://xiamianyu.github.io/posts/live-category/"/>
    <id>http://xiamianyu.github.io/posts/live-category/</id>
    <published>2020-06-21T03:26:24.000Z</published>
    <updated>2025-10-31T14:09:07.572Z</updated>
    
    <content type="html"><![CDATA[<p>直播大致可分为非交互式直播和交互式直播两大类。</p><h2 id="非交互式直播"><a href="#非交互式直播" class="headerlink" title="非交互式直播"></a>非交互式直播</h2><ul><li>场景：阅兵直播、NBA直播和欧冠直播等</li><li>特点：交互性不强，允许延迟10s或10s以上</li></ul><h2 id="交互式直播"><a href="#交互式直播" class="headerlink" title="交互式直播"></a>交互式直播</h2><ul><li>场景：秀场直播、游戏直播等</li><li>特点：交互性较强，要求延迟在5s以内</li></ul><p>交互式直播又细分如下：</p><h2 id="普通直播"><a href="#普通直播" class="headerlink" title="普通直播"></a>普通直播</h2><ul><li>场景：秀场直播、游戏直播等</li><li>特点：一个推流端（主播），多个拉流端（观众）</li></ul><h2 id="实时音视频"><a href="#实时音视频" class="headerlink" title="实时音视频"></a>实时音视频</h2><ul><li>场景：音视频通话，适用于多人群组通话，如QQ通话、微信通话等</li><li>特点：多个推流端，不区分主播和观众，所有用户都可以发言</li></ul><h2 id="实时互动直播"><a href="#实时互动直播" class="headerlink" title="实时互动直播"></a>实时互动直播</h2><p>在实时音视频的基础上，增加观众与主播，或主播与主播的连麦互动，并通过旁路直播的工作方式。</p><p>主播与连麦者之间延迟与实时音视频一致，而主播或连麦者与普通观众之间的延时则与普通直播相同。</p><h2 id="旁路直播"><a href="#旁路直播" class="headerlink" title="旁路直播"></a>旁路直播</h2><p>将主副播实时音视频通话时整个房间的画面复制一份到云端进行混流，并将混流后的画面推流给直播系统的工作方式。</p><p>因混流后的数据流和主副播通话并不是同一路流，而是与主路平行的一路，又称为旁路。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;直播大致可分为非交互式直播和交互式直播两大类。&lt;/p&gt;
&lt;h2 id=&quot;非交互式直播&quot;&gt;&lt;a href=&quot;#非交互式直播&quot; class=&quot;headerlink&quot; title=&quot;非交互式直播&quot;&gt;&lt;/a&gt;非交互式直播&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;场景：阅兵直播、NBA直播和欧冠直</summary>
      
    
    
    
    
    <category term="av" scheme="http://xiamianyu.github.io/tags/av/"/>
    
  </entry>
  
  <entry>
    <title>代码没排版</title>
    <link href="http://xiamianyu.github.io/posts/code-not-formatted/"/>
    <id>http://xiamianyu.github.io/posts/code-not-formatted/</id>
    <published>2019-03-06T02:27:51.000Z</published>
    <updated>2025-10-31T13:21:51.264Z</updated>
    
    <content type="html"><![CDATA[<p>上小学时，有一次大姐在家里写作文，还没见过作文的我特别好奇，就在旁边静静地看着。我发现大姐每段开头都要空两格，就算前一个段落最后一行只有一个字，下一个段落也要另起一行。</p><p>我心里特别纳闷，这不是很浪费纸吗？干嘛不一写到底呀？大姐也不知道作何解释，只是说那是写作文的要求。后来我才知道这些要求都是为了让作文段落分明，易于阅读。</p><p>可惜很多人把这个要求给忘了，就拿我所处的软件行业来说，很多人写的代码几乎没有排版可言，只要软件能跑起来就算万事大吉，代码排版？不存在的。</p><p>平时看到别人开发的炫酷功能时，我都特别想抱他们大腿，但是看了他们没有排版、乱糟糟的代码后，瞬间没有了兴趣。</p><p>我会把代码排版放第一位，因为我是一个人，不是机器，良好的排版能让人赏心悦目，易于阅读。</p><p>试想一下，如果把高考满分作文不分段落地写出来，在高考这种高强度的批卷下，老师是没有耐心一字一句去看作文的，想要满分何其艰难。</p><p>而软件开发更是一个高强度脑力劳动的职业，为了不让大家早点秃顶，还是注重一下代码排版吧。</p><p>就连农民伯伯都知道要按合理的间距种菜，这样才能让它们各自有充足的空间成长，不至于种出来的菜高矮胖瘦，影响产量，而我们为何不能把代码排版这件小事做好呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上小学时，有一次大姐在家里写作文，还没见过作文的我特别好奇，就在旁边静静地看着。我发现大姐每段开头都要空两格，就算前一个段落最后一行只有一个字，下一个段落也要另起一行。&lt;/p&gt;
&lt;p&gt;我心里特别纳闷，这不是很浪费纸吗？干嘛不一写到底呀？大姐也不知道作何解释，只是说那是写作文</summary>
      
    
    
    
    
    <category term="essay" scheme="http://xiamianyu.github.io/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>维护Android CI</title>
    <link href="http://xiamianyu.github.io/posts/maintain-aci/"/>
    <id>http://xiamianyu.github.io/posts/maintain-aci/</id>
    <published>2018-02-23T12:36:29.000Z</published>
    <updated>2025-10-31T13:21:51.268Z</updated>
    
    <content type="html"><![CDATA[<p>随着Android Studio和Android SDK的升级和更新，Android CI也需要同步升级，主要升级的内容是Gradle和Android SDK。</p><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p>从<a href="https://gradle.org/releases/">官网</a>下载指定版本的压缩包并将其上传到Jenkins所在的主机：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>scp gradle-<span class="number">4.1</span>-all.zip ubuntu<span class="variable">@192</span>.<span class="number">168.1</span>.<span class="number">253</span></span><br></pre></td></tr></table></figure><p>解压压缩包到指定目录：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> unzip gradle-4.1-all.zip -d /opt/gradle/</span></span><br></pre></td></tr></table></figure><p>配置Gradle到环境变量：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> vim /etc/profile</span></span><br></pre></td></tr></table></figure><p>更新以下内容并保存：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">GRADLE_HOME</span>=/opt/gradle/gradle-4.1</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$GRADLE_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure><p>让环境变量立即生效：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">source</span> /etc/profile</span></span><br></pre></td></tr></table></figure><p>检查升级是否成功：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">$ gradle -v</span></span><br><span class="line"><span class="section">------------------------------------------------------------</span></span><br><span class="line"><span class="section">Gradle 4.1</span></span><br><span class="line"><span class="section">------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">Build time:   2017-08-07 14:38:48 UTC</span><br><span class="line">Revision:     941559e020f6c357ebb08d5c67acdb858a3defc2</span><br><span class="line"></span><br><span class="line">Groovy:       2.4.11</span><br><span class="line">Ant:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015</span><br><span class="line">JVM:          1.8.0_121 (Oracle Corporation 25.121-b13)</span><br><span class="line">OS:           Linux 3.5.0-47-generic amd64</span><br></pre></td></tr></table></figure><h2 id="Android-SDK"><a href="#Android-SDK" class="headerlink" title="Android SDK"></a>Android SDK</h2><p>Android SDK的升级主要是更新<code>build-tools</code>和<code>platforms</code>目录下的内容，我们通过命令行的方式完成它们的更新。</p><p>列出SDK所有信息：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">$ android list sdk --all --extended | more</span><br><span class="line"><span class="bullet">...</span></span><br><span class="line"><span class="bullet"></span>id: 2 or &quot;platform-tools&quot;</span><br><span class="line"><span class="code">     Type: PlatformTool</span></span><br><span class="line"><span class="section">     Desc: Android SDK Platform-tools, revision 27.0.1</span></span><br><span class="line"><span class="section">----------</span></span><br><span class="line">id: 3 or &quot;build-tools-27.0.3&quot;</span><br><span class="line"><span class="code">     Type: BuildTool</span></span><br><span class="line"><span class="section">     Desc: Android SDK Build-tools, revision 27.0.3</span></span><br><span class="line"><span class="section">----------</span></span><br><span class="line">id: 4 or &quot;build-tools-27.0.2&quot;</span><br><span class="line"><span class="code">     Type: BuildTool</span></span><br><span class="line"><span class="section">     Desc: Android SDK Build-tools, revision 27.0.2</span></span><br><span class="line"><span class="section">----------</span></span><br><span class="line">id: 5 or &quot;build-tools-27.0.1&quot;</span><br><span class="line"><span class="code">     Type: BuildTool</span></span><br><span class="line"><span class="code">     Desc: Android SDK Build-tools, revision 27.0.1</span></span><br><span class="line"><span class="bullet">...</span></span><br><span class="line"><span class="bullet"></span>id: 42 or &quot;android-27&quot;</span><br><span class="line"><span class="code">     Type: Platform</span></span><br><span class="line"><span class="code">     Desc: Android SDK Platform 27</span></span><br><span class="line"><span class="section">           Revision 1</span></span><br><span class="line"><span class="section">----------</span></span><br><span class="line">id: 43 or &quot;android-26&quot;</span><br><span class="line"><span class="code">     Type: Platform</span></span><br><span class="line"><span class="code">     Desc: Android SDK Platform 26</span></span><br><span class="line"><span class="section">           Revision 2</span></span><br><span class="line"><span class="section">----------</span></span><br><span class="line">id: 44 or &quot;android-25&quot;</span><br><span class="line"><span class="code">     Type: Platform</span></span><br><span class="line"><span class="code">     Desc: Android SDK Platform 25</span></span><br><span class="line"><span class="section">           Revision 3</span></span><br><span class="line"><span class="section">----------</span></span><br><span class="line">id: 45 or &quot;android-24&quot;</span><br><span class="line"><span class="code">     Type: Platform</span></span><br><span class="line"><span class="code">     Desc: Android SDK Platform 24</span></span><br><span class="line"><span class="code">           Revision 2</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>我们只需要下载Type为BuildTool和Platform的选项即可，BuildTool对应 <code>build-tools</code>，Platform对应<code>platforms</code>。比如<code>build-tools</code>中缺少 27.0.1，<code>platforms</code>中缺少 27，我们可执行以下命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># u: no-ui</span></span><br><span class="line"><span class="comment"># a: all </span></span><br><span class="line"><span class="comment"># t: filter</span></span><br><span class="line"><span class="variable">$</span> android update sdk <span class="literal">-u</span> <span class="literal">-a</span> <span class="literal">-t</span> <span class="built_in">build-tools</span><span class="literal">-27</span>.<span class="number">0.1</span>,android<span class="literal">-27</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/17031381/android-exception-in-org-eclipse-swt-swterror-no-more-handles-gtk-init-check">No more handles [gtk_init_check() failed]</a></li><li><a href="https://stackoverflow.com/questions/17963508/how-to-install-android-sdk-build-tools-on-the-command-line">How to install Android SDK Build Tools on the command line</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着Android Studio和Android SDK的升级和更新，Android CI也需要同步升级，主要升级的内容是Gradle和Android SDK。&lt;/p&gt;
&lt;h2 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="android" scheme="http://xiamianyu.github.io/tags/android/"/>
    
    <category term="ci" scheme="http://xiamianyu.github.io/tags/ci/"/>
    
  </entry>
  
</feed>
